generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model appointments {
  id                                          Int      @default(autoincrement())
  appointment_date                            DateTime @db.Date
  appointment_from                            DateTime @db.Time(0)
  appointment_to                              DateTime @db.Time(0)
  dr_national_id                              Int
  patient_national_id                         Int
  user_appointments_dr_national_idTouser      user     @relation("appointments_dr_national_idTouser", fields: [dr_national_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_appointments_user1")
  user_appointments_patient_national_idTouser user     @relation("appointments_patient_national_idTouser", fields: [patient_national_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_appointments_user2")
  record                                      record[]

  @@id([id, dr_national_id, patient_national_id])
  @@index([dr_national_id], map: "fk_appointments_user1_idx")
  @@index([patient_national_id], map: "fk_appointments_user2_idx")
}

model record {
  id              Int           @id @default(autoincrement())
  date            DateTime      @db.DateTime(0)
  description     String?       @db.LongText
  appointments_id Int
  record_type_id  Int
  appointments    appointments  @relation(fields: [appointments_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_record_appointments1")
  record_type     record_type   @relation(fields: [record_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_record_record_type1")
  record_file     record_file[]

  @@index([appointments_id], map: "fk_record_appointments1_idx")
  @@index([record_type_id], map: "fk_record_record_type1_idx")
}

model record_file {
  id        Int    @id @default(autoincrement())
  path      String @db.VarChar(255)
  record_id Int
  record    record @relation(fields: [record_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_record_file_record1")

  @@index([record_id], map: "fk_record_file_record1_idx")
}

model record_type {
  id          Int      @id
  name        String   @unique(map: "name_UNIQUE") @db.VarChar(45)
  description String?  @db.VarChar(255)
  record      record[]
}

model role {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(255)
  privileges String? @db.VarChar(225)
  user       user[]
}

model user {
  id                                                  Int            @id
  name                                                String         @db.VarChar(255)
  mname                                               String         @db.VarChar(255)
  lname                                               String         @db.VarChar(255)
  phone                                               String         @db.VarChar(255)
  email                                               String?        @db.VarChar(255)
  address                                             String?        @db.VarChar(255)
  birthdate                                           DateTime?      @db.DateTime(0)
  role_id                                             Int
  password                                            String         @db.VarChar(125)
  passwordChangedAt                                   DateTime?      @db.DateTime(0)
  passwordResetToken                                  String?        @db.VarChar(125)
  passwordResetTokenExpiry                            DateTime?      @db.DateTime(0)
  role                                                role           @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role1")
  appointments_appointments_dr_national_idTouser      appointments[] @relation("appointments_dr_national_idTouser")
  appointments_appointments_patient_national_idTouser appointments[] @relation("appointments_patient_national_idTouser")

  @@index([role_id], map: "fk_user_role1_idx")
}
