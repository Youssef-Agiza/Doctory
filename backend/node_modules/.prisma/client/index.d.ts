
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model appointments
 * 
 */
export type appointments = {
  id: number
  appointment_date: Date
  appointment_from: Date
  appointment_to: Date
  dr_national_id: number
  patient_national_id: number
}

/**
 * Model record
 * 
 */
export type record = {
  id: number
  date: Date
  description: string | null
  appointments_id: number
  record_type_id: number
}

/**
 * Model record_file
 * 
 */
export type record_file = {
  id: number
  path: string
  record_id: number
}

/**
 * Model record_type
 * 
 */
export type record_type = {
  id: number
  name: string
  description: string | null
}

/**
 * Model role
 * 
 */
export type role = {
  id: number
  name: string
  privileges: string | null
}

/**
 * Model user
 * 
 */
export type user = {
  id: number
  name: string
  mname: string
  lname: string
  phone: string
  email: string | null
  address: string | null
  birthdate: Date | null
  role_id: number
  password: string
  passwordChangedAt: Date | null
  passwordResetToken: string | null
  passwordResetTokenExpiry: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Appointments
 * const appointments = await prisma.appointments.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Appointments
   * const appointments = await prisma.appointments.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.appointments`: Exposes CRUD operations for the **appointments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointments.findMany()
    * ```
    */
  get appointments(): Prisma.appointmentsDelegate<GlobalReject>;

  /**
   * `prisma.record`: Exposes CRUD operations for the **record** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Records
    * const records = await prisma.record.findMany()
    * ```
    */
  get record(): Prisma.recordDelegate<GlobalReject>;

  /**
   * `prisma.record_file`: Exposes CRUD operations for the **record_file** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Record_files
    * const record_files = await prisma.record_file.findMany()
    * ```
    */
  get record_file(): Prisma.record_fileDelegate<GlobalReject>;

  /**
   * `prisma.record_type`: Exposes CRUD operations for the **record_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Record_types
    * const record_types = await prisma.record_type.findMany()
    * ```
    */
  get record_type(): Prisma.record_typeDelegate<GlobalReject>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.roleDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    appointments: 'appointments',
    record: 'record',
    record_file: 'record_file',
    record_type: 'record_type',
    role: 'role',
    user: 'user'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AppointmentsCountOutputType
   */


  export type AppointmentsCountOutputType = {
    record: number
  }

  export type AppointmentsCountOutputTypeSelect = {
    record?: boolean
  }

  export type AppointmentsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AppointmentsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AppointmentsCountOutputType
    : S extends undefined
    ? never
    : S extends AppointmentsCountOutputTypeArgs
    ?'include' extends U
    ? AppointmentsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AppointmentsCountOutputType ? AppointmentsCountOutputType[P] : never
  } 
    : AppointmentsCountOutputType
  : AppointmentsCountOutputType




  // Custom InputTypes

  /**
   * AppointmentsCountOutputType without action
   */
  export type AppointmentsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsCountOutputType
     * 
    **/
    select?: AppointmentsCountOutputTypeSelect | null
  }



  /**
   * Count Type RecordCountOutputType
   */


  export type RecordCountOutputType = {
    record_file: number
  }

  export type RecordCountOutputTypeSelect = {
    record_file?: boolean
  }

  export type RecordCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RecordCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RecordCountOutputType
    : S extends undefined
    ? never
    : S extends RecordCountOutputTypeArgs
    ?'include' extends U
    ? RecordCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RecordCountOutputType ? RecordCountOutputType[P] : never
  } 
    : RecordCountOutputType
  : RecordCountOutputType




  // Custom InputTypes

  /**
   * RecordCountOutputType without action
   */
  export type RecordCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RecordCountOutputType
     * 
    **/
    select?: RecordCountOutputTypeSelect | null
  }



  /**
   * Count Type Record_typeCountOutputType
   */


  export type Record_typeCountOutputType = {
    record: number
  }

  export type Record_typeCountOutputTypeSelect = {
    record?: boolean
  }

  export type Record_typeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Record_typeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Record_typeCountOutputType
    : S extends undefined
    ? never
    : S extends Record_typeCountOutputTypeArgs
    ?'include' extends U
    ? Record_typeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Record_typeCountOutputType ? Record_typeCountOutputType[P] : never
  } 
    : Record_typeCountOutputType
  : Record_typeCountOutputType




  // Custom InputTypes

  /**
   * Record_typeCountOutputType without action
   */
  export type Record_typeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Record_typeCountOutputType
     * 
    **/
    select?: Record_typeCountOutputTypeSelect | null
  }



  /**
   * Count Type RoleCountOutputType
   */


  export type RoleCountOutputType = {
    user: number
  }

  export type RoleCountOutputTypeSelect = {
    user?: boolean
  }

  export type RoleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RoleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RoleCountOutputType
    : S extends undefined
    ? never
    : S extends RoleCountOutputTypeArgs
    ?'include' extends U
    ? RoleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RoleCountOutputType ? RoleCountOutputType[P] : never
  } 
    : RoleCountOutputType
  : RoleCountOutputType




  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     * 
    **/
    select?: RoleCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    appointments_appointments_dr_national_idTouser: number
    appointments_appointments_patient_national_idTouser: number
  }

  export type UserCountOutputTypeSelect = {
    appointments_appointments_dr_national_idTouser?: boolean
    appointments_appointments_patient_national_idTouser?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model appointments
   */


  export type AggregateAppointments = {
    _count: AppointmentsCountAggregateOutputType | null
    _avg: AppointmentsAvgAggregateOutputType | null
    _sum: AppointmentsSumAggregateOutputType | null
    _min: AppointmentsMinAggregateOutputType | null
    _max: AppointmentsMaxAggregateOutputType | null
  }

  export type AppointmentsAvgAggregateOutputType = {
    id: number | null
    dr_national_id: number | null
    patient_national_id: number | null
  }

  export type AppointmentsSumAggregateOutputType = {
    id: number | null
    dr_national_id: number | null
    patient_national_id: number | null
  }

  export type AppointmentsMinAggregateOutputType = {
    id: number | null
    appointment_date: Date | null
    appointment_from: Date | null
    appointment_to: Date | null
    dr_national_id: number | null
    patient_national_id: number | null
  }

  export type AppointmentsMaxAggregateOutputType = {
    id: number | null
    appointment_date: Date | null
    appointment_from: Date | null
    appointment_to: Date | null
    dr_national_id: number | null
    patient_national_id: number | null
  }

  export type AppointmentsCountAggregateOutputType = {
    id: number
    appointment_date: number
    appointment_from: number
    appointment_to: number
    dr_national_id: number
    patient_national_id: number
    _all: number
  }


  export type AppointmentsAvgAggregateInputType = {
    id?: true
    dr_national_id?: true
    patient_national_id?: true
  }

  export type AppointmentsSumAggregateInputType = {
    id?: true
    dr_national_id?: true
    patient_national_id?: true
  }

  export type AppointmentsMinAggregateInputType = {
    id?: true
    appointment_date?: true
    appointment_from?: true
    appointment_to?: true
    dr_national_id?: true
    patient_national_id?: true
  }

  export type AppointmentsMaxAggregateInputType = {
    id?: true
    appointment_date?: true
    appointment_from?: true
    appointment_to?: true
    dr_national_id?: true
    patient_national_id?: true
  }

  export type AppointmentsCountAggregateInputType = {
    id?: true
    appointment_date?: true
    appointment_from?: true
    appointment_to?: true
    dr_national_id?: true
    patient_national_id?: true
    _all?: true
  }

  export type AppointmentsAggregateArgs = {
    /**
     * Filter which appointments to aggregate.
     * 
    **/
    where?: appointmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<appointmentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: appointmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned appointments
    **/
    _count?: true | AppointmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentsMaxAggregateInputType
  }

  export type GetAppointmentsAggregateType<T extends AppointmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointments[P]>
      : GetScalarType<T[P], AggregateAppointments[P]>
  }




  export type AppointmentsGroupByArgs = {
    where?: appointmentsWhereInput
    orderBy?: Enumerable<appointmentsOrderByWithAggregationInput>
    by: Array<AppointmentsScalarFieldEnum>
    having?: appointmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentsCountAggregateInputType | true
    _avg?: AppointmentsAvgAggregateInputType
    _sum?: AppointmentsSumAggregateInputType
    _min?: AppointmentsMinAggregateInputType
    _max?: AppointmentsMaxAggregateInputType
  }


  export type AppointmentsGroupByOutputType = {
    id: number
    appointment_date: Date
    appointment_from: Date
    appointment_to: Date
    dr_national_id: number
    patient_national_id: number
    _count: AppointmentsCountAggregateOutputType | null
    _avg: AppointmentsAvgAggregateOutputType | null
    _sum: AppointmentsSumAggregateOutputType | null
    _min: AppointmentsMinAggregateOutputType | null
    _max: AppointmentsMaxAggregateOutputType | null
  }

  type GetAppointmentsGroupByPayload<T extends AppointmentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AppointmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentsGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentsGroupByOutputType[P]>
        }
      >
    >


  export type appointmentsSelect = {
    id?: boolean
    appointment_date?: boolean
    appointment_from?: boolean
    appointment_to?: boolean
    dr_national_id?: boolean
    patient_national_id?: boolean
    user_appointments_dr_national_idTouser?: boolean | userArgs
    user_appointments_patient_national_idTouser?: boolean | userArgs
    record?: boolean | recordFindManyArgs
    _count?: boolean | AppointmentsCountOutputTypeArgs
  }

  export type appointmentsInclude = {
    user_appointments_dr_national_idTouser?: boolean | userArgs
    user_appointments_patient_national_idTouser?: boolean | userArgs
    record?: boolean | recordFindManyArgs
    _count?: boolean | AppointmentsCountOutputTypeArgs
  }

  export type appointmentsGetPayload<
    S extends boolean | null | undefined | appointmentsArgs,
    U = keyof S
      > = S extends true
        ? appointments
    : S extends undefined
    ? never
    : S extends appointmentsArgs | appointmentsFindManyArgs
    ?'include' extends U
    ? appointments  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user_appointments_dr_national_idTouser' ? userGetPayload<S['include'][P]> :
        P extends 'user_appointments_patient_national_idTouser' ? userGetPayload<S['include'][P]> :
        P extends 'record' ? Array < recordGetPayload<S['include'][P]>>  :
        P extends '_count' ? AppointmentsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user_appointments_dr_national_idTouser' ? userGetPayload<S['select'][P]> :
        P extends 'user_appointments_patient_national_idTouser' ? userGetPayload<S['select'][P]> :
        P extends 'record' ? Array < recordGetPayload<S['select'][P]>>  :
        P extends '_count' ? AppointmentsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof appointments ? appointments[P] : never
  } 
    : appointments
  : appointments


  type appointmentsCountArgs = Merge<
    Omit<appointmentsFindManyArgs, 'select' | 'include'> & {
      select?: AppointmentsCountAggregateInputType | true
    }
  >

  export interface appointmentsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Appointments that matches the filter.
     * @param {appointmentsFindUniqueArgs} args - Arguments to find a Appointments
     * @example
     * // Get one Appointments
     * const appointments = await prisma.appointments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends appointmentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, appointmentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'appointments'> extends True ? CheckSelect<T, Prisma__appointmentsClient<appointments>, Prisma__appointmentsClient<appointmentsGetPayload<T>>> : CheckSelect<T, Prisma__appointmentsClient<appointments | null >, Prisma__appointmentsClient<appointmentsGetPayload<T> | null >>

    /**
     * Find the first Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentsFindFirstArgs} args - Arguments to find a Appointments
     * @example
     * // Get one Appointments
     * const appointments = await prisma.appointments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends appointmentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, appointmentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'appointments'> extends True ? CheckSelect<T, Prisma__appointmentsClient<appointments>, Prisma__appointmentsClient<appointmentsGetPayload<T>>> : CheckSelect<T, Prisma__appointmentsClient<appointments | null >, Prisma__appointmentsClient<appointmentsGetPayload<T> | null >>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointments.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentsWithIdOnly = await prisma.appointments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends appointmentsFindManyArgs>(
      args?: SelectSubset<T, appointmentsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<appointments>>, PrismaPromise<Array<appointmentsGetPayload<T>>>>

    /**
     * Create a Appointments.
     * @param {appointmentsCreateArgs} args - Arguments to create a Appointments.
     * @example
     * // Create one Appointments
     * const Appointments = await prisma.appointments.create({
     *   data: {
     *     // ... data to create a Appointments
     *   }
     * })
     * 
    **/
    create<T extends appointmentsCreateArgs>(
      args: SelectSubset<T, appointmentsCreateArgs>
    ): CheckSelect<T, Prisma__appointmentsClient<appointments>, Prisma__appointmentsClient<appointmentsGetPayload<T>>>

    /**
     * Create many Appointments.
     *     @param {appointmentsCreateManyArgs} args - Arguments to create many Appointments.
     *     @example
     *     // Create many Appointments
     *     const appointments = await prisma.appointments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends appointmentsCreateManyArgs>(
      args?: SelectSubset<T, appointmentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Appointments.
     * @param {appointmentsDeleteArgs} args - Arguments to delete one Appointments.
     * @example
     * // Delete one Appointments
     * const Appointments = await prisma.appointments.delete({
     *   where: {
     *     // ... filter to delete one Appointments
     *   }
     * })
     * 
    **/
    delete<T extends appointmentsDeleteArgs>(
      args: SelectSubset<T, appointmentsDeleteArgs>
    ): CheckSelect<T, Prisma__appointmentsClient<appointments>, Prisma__appointmentsClient<appointmentsGetPayload<T>>>

    /**
     * Update one Appointments.
     * @param {appointmentsUpdateArgs} args - Arguments to update one Appointments.
     * @example
     * // Update one Appointments
     * const appointments = await prisma.appointments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends appointmentsUpdateArgs>(
      args: SelectSubset<T, appointmentsUpdateArgs>
    ): CheckSelect<T, Prisma__appointmentsClient<appointments>, Prisma__appointmentsClient<appointmentsGetPayload<T>>>

    /**
     * Delete zero or more Appointments.
     * @param {appointmentsDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends appointmentsDeleteManyArgs>(
      args?: SelectSubset<T, appointmentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointments = await prisma.appointments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends appointmentsUpdateManyArgs>(
      args: SelectSubset<T, appointmentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointments.
     * @param {appointmentsUpsertArgs} args - Arguments to update or create a Appointments.
     * @example
     * // Update or create a Appointments
     * const appointments = await prisma.appointments.upsert({
     *   create: {
     *     // ... data to create a Appointments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointments we want to update
     *   }
     * })
    **/
    upsert<T extends appointmentsUpsertArgs>(
      args: SelectSubset<T, appointmentsUpsertArgs>
    ): CheckSelect<T, Prisma__appointmentsClient<appointments>, Prisma__appointmentsClient<appointmentsGetPayload<T>>>

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentsCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointments.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends appointmentsCountArgs>(
      args?: Subset<T, appointmentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentsAggregateArgs>(args: Subset<T, AppointmentsAggregateArgs>): PrismaPromise<GetAppointmentsAggregateType<T>>

    /**
     * Group by Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentsGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for appointments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__appointmentsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user_appointments_dr_national_idTouser<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    user_appointments_patient_national_idTouser<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    record<T extends recordFindManyArgs = {}>(args?: Subset<T, recordFindManyArgs>): CheckSelect<T, PrismaPromise<Array<record>>, PrismaPromise<Array<recordGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * appointments findUnique
   */
  export type appointmentsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the appointments
     * 
    **/
    select?: appointmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: appointmentsInclude | null
    /**
     * Throw an Error if a appointments can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which appointments to fetch.
     * 
    **/
    where: appointmentsWhereUniqueInput
  }


  /**
   * appointments findFirst
   */
  export type appointmentsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the appointments
     * 
    **/
    select?: appointmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: appointmentsInclude | null
    /**
     * Throw an Error if a appointments can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which appointments to fetch.
     * 
    **/
    where?: appointmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<appointmentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for appointments.
     * 
    **/
    cursor?: appointmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of appointments.
     * 
    **/
    distinct?: Enumerable<AppointmentsScalarFieldEnum>
  }


  /**
   * appointments findMany
   */
  export type appointmentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the appointments
     * 
    **/
    select?: appointmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: appointmentsInclude | null
    /**
     * Filter, which appointments to fetch.
     * 
    **/
    where?: appointmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<appointmentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing appointments.
     * 
    **/
    cursor?: appointmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AppointmentsScalarFieldEnum>
  }


  /**
   * appointments create
   */
  export type appointmentsCreateArgs = {
    /**
     * Select specific fields to fetch from the appointments
     * 
    **/
    select?: appointmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: appointmentsInclude | null
    /**
     * The data needed to create a appointments.
     * 
    **/
    data: XOR<appointmentsCreateInput, appointmentsUncheckedCreateInput>
  }


  /**
   * appointments createMany
   */
  export type appointmentsCreateManyArgs = {
    /**
     * The data used to create many appointments.
     * 
    **/
    data: Enumerable<appointmentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * appointments update
   */
  export type appointmentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the appointments
     * 
    **/
    select?: appointmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: appointmentsInclude | null
    /**
     * The data needed to update a appointments.
     * 
    **/
    data: XOR<appointmentsUpdateInput, appointmentsUncheckedUpdateInput>
    /**
     * Choose, which appointments to update.
     * 
    **/
    where: appointmentsWhereUniqueInput
  }


  /**
   * appointments updateMany
   */
  export type appointmentsUpdateManyArgs = {
    /**
     * The data used to update appointments.
     * 
    **/
    data: XOR<appointmentsUpdateManyMutationInput, appointmentsUncheckedUpdateManyInput>
    /**
     * Filter which appointments to update
     * 
    **/
    where?: appointmentsWhereInput
  }


  /**
   * appointments upsert
   */
  export type appointmentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the appointments
     * 
    **/
    select?: appointmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: appointmentsInclude | null
    /**
     * The filter to search for the appointments to update in case it exists.
     * 
    **/
    where: appointmentsWhereUniqueInput
    /**
     * In case the appointments found by the `where` argument doesn't exist, create a new appointments with this data.
     * 
    **/
    create: XOR<appointmentsCreateInput, appointmentsUncheckedCreateInput>
    /**
     * In case the appointments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<appointmentsUpdateInput, appointmentsUncheckedUpdateInput>
  }


  /**
   * appointments delete
   */
  export type appointmentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the appointments
     * 
    **/
    select?: appointmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: appointmentsInclude | null
    /**
     * Filter which appointments to delete.
     * 
    **/
    where: appointmentsWhereUniqueInput
  }


  /**
   * appointments deleteMany
   */
  export type appointmentsDeleteManyArgs = {
    /**
     * Filter which appointments to delete
     * 
    **/
    where?: appointmentsWhereInput
  }


  /**
   * appointments without action
   */
  export type appointmentsArgs = {
    /**
     * Select specific fields to fetch from the appointments
     * 
    **/
    select?: appointmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: appointmentsInclude | null
  }



  /**
   * Model record
   */


  export type AggregateRecord = {
    _count: RecordCountAggregateOutputType | null
    _avg: RecordAvgAggregateOutputType | null
    _sum: RecordSumAggregateOutputType | null
    _min: RecordMinAggregateOutputType | null
    _max: RecordMaxAggregateOutputType | null
  }

  export type RecordAvgAggregateOutputType = {
    id: number | null
    appointments_id: number | null
    record_type_id: number | null
  }

  export type RecordSumAggregateOutputType = {
    id: number | null
    appointments_id: number | null
    record_type_id: number | null
  }

  export type RecordMinAggregateOutputType = {
    id: number | null
    date: Date | null
    description: string | null
    appointments_id: number | null
    record_type_id: number | null
  }

  export type RecordMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    description: string | null
    appointments_id: number | null
    record_type_id: number | null
  }

  export type RecordCountAggregateOutputType = {
    id: number
    date: number
    description: number
    appointments_id: number
    record_type_id: number
    _all: number
  }


  export type RecordAvgAggregateInputType = {
    id?: true
    appointments_id?: true
    record_type_id?: true
  }

  export type RecordSumAggregateInputType = {
    id?: true
    appointments_id?: true
    record_type_id?: true
  }

  export type RecordMinAggregateInputType = {
    id?: true
    date?: true
    description?: true
    appointments_id?: true
    record_type_id?: true
  }

  export type RecordMaxAggregateInputType = {
    id?: true
    date?: true
    description?: true
    appointments_id?: true
    record_type_id?: true
  }

  export type RecordCountAggregateInputType = {
    id?: true
    date?: true
    description?: true
    appointments_id?: true
    record_type_id?: true
    _all?: true
  }

  export type RecordAggregateArgs = {
    /**
     * Filter which record to aggregate.
     * 
    **/
    where?: recordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records to fetch.
     * 
    **/
    orderBy?: Enumerable<recordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: recordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned records
    **/
    _count?: true | RecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordMaxAggregateInputType
  }

  export type GetRecordAggregateType<T extends RecordAggregateArgs> = {
        [P in keyof T & keyof AggregateRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecord[P]>
      : GetScalarType<T[P], AggregateRecord[P]>
  }




  export type RecordGroupByArgs = {
    where?: recordWhereInput
    orderBy?: Enumerable<recordOrderByWithAggregationInput>
    by: Array<RecordScalarFieldEnum>
    having?: recordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordCountAggregateInputType | true
    _avg?: RecordAvgAggregateInputType
    _sum?: RecordSumAggregateInputType
    _min?: RecordMinAggregateInputType
    _max?: RecordMaxAggregateInputType
  }


  export type RecordGroupByOutputType = {
    id: number
    date: Date
    description: string | null
    appointments_id: number
    record_type_id: number
    _count: RecordCountAggregateOutputType | null
    _avg: RecordAvgAggregateOutputType | null
    _sum: RecordSumAggregateOutputType | null
    _min: RecordMinAggregateOutputType | null
    _max: RecordMaxAggregateOutputType | null
  }

  type GetRecordGroupByPayload<T extends RecordGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordGroupByOutputType[P]>
            : GetScalarType<T[P], RecordGroupByOutputType[P]>
        }
      >
    >


  export type recordSelect = {
    id?: boolean
    date?: boolean
    description?: boolean
    appointments_id?: boolean
    record_type_id?: boolean
    appointments?: boolean | appointmentsArgs
    record_type?: boolean | record_typeArgs
    record_file?: boolean | record_fileFindManyArgs
    _count?: boolean | RecordCountOutputTypeArgs
  }

  export type recordInclude = {
    appointments?: boolean | appointmentsArgs
    record_type?: boolean | record_typeArgs
    record_file?: boolean | record_fileFindManyArgs
    _count?: boolean | RecordCountOutputTypeArgs
  }

  export type recordGetPayload<
    S extends boolean | null | undefined | recordArgs,
    U = keyof S
      > = S extends true
        ? record
    : S extends undefined
    ? never
    : S extends recordArgs | recordFindManyArgs
    ?'include' extends U
    ? record  & {
    [P in TrueKeys<S['include']>]:
        P extends 'appointments' ? appointmentsGetPayload<S['include'][P]> :
        P extends 'record_type' ? record_typeGetPayload<S['include'][P]> :
        P extends 'record_file' ? Array < record_fileGetPayload<S['include'][P]>>  :
        P extends '_count' ? RecordCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'appointments' ? appointmentsGetPayload<S['select'][P]> :
        P extends 'record_type' ? record_typeGetPayload<S['select'][P]> :
        P extends 'record_file' ? Array < record_fileGetPayload<S['select'][P]>>  :
        P extends '_count' ? RecordCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof record ? record[P] : never
  } 
    : record
  : record


  type recordCountArgs = Merge<
    Omit<recordFindManyArgs, 'select' | 'include'> & {
      select?: RecordCountAggregateInputType | true
    }
  >

  export interface recordDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Record that matches the filter.
     * @param {recordFindUniqueArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends recordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, recordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'record'> extends True ? CheckSelect<T, Prisma__recordClient<record>, Prisma__recordClient<recordGetPayload<T>>> : CheckSelect<T, Prisma__recordClient<record | null >, Prisma__recordClient<recordGetPayload<T> | null >>

    /**
     * Find the first Record that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordFindFirstArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends recordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, recordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'record'> extends True ? CheckSelect<T, Prisma__recordClient<record>, Prisma__recordClient<recordGetPayload<T>>> : CheckSelect<T, Prisma__recordClient<record | null >, Prisma__recordClient<recordGetPayload<T> | null >>

    /**
     * Find zero or more Records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Records
     * const records = await prisma.record.findMany()
     * 
     * // Get first 10 Records
     * const records = await prisma.record.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recordWithIdOnly = await prisma.record.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends recordFindManyArgs>(
      args?: SelectSubset<T, recordFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<record>>, PrismaPromise<Array<recordGetPayload<T>>>>

    /**
     * Create a Record.
     * @param {recordCreateArgs} args - Arguments to create a Record.
     * @example
     * // Create one Record
     * const Record = await prisma.record.create({
     *   data: {
     *     // ... data to create a Record
     *   }
     * })
     * 
    **/
    create<T extends recordCreateArgs>(
      args: SelectSubset<T, recordCreateArgs>
    ): CheckSelect<T, Prisma__recordClient<record>, Prisma__recordClient<recordGetPayload<T>>>

    /**
     * Create many Records.
     *     @param {recordCreateManyArgs} args - Arguments to create many Records.
     *     @example
     *     // Create many Records
     *     const record = await prisma.record.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends recordCreateManyArgs>(
      args?: SelectSubset<T, recordCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Record.
     * @param {recordDeleteArgs} args - Arguments to delete one Record.
     * @example
     * // Delete one Record
     * const Record = await prisma.record.delete({
     *   where: {
     *     // ... filter to delete one Record
     *   }
     * })
     * 
    **/
    delete<T extends recordDeleteArgs>(
      args: SelectSubset<T, recordDeleteArgs>
    ): CheckSelect<T, Prisma__recordClient<record>, Prisma__recordClient<recordGetPayload<T>>>

    /**
     * Update one Record.
     * @param {recordUpdateArgs} args - Arguments to update one Record.
     * @example
     * // Update one Record
     * const record = await prisma.record.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends recordUpdateArgs>(
      args: SelectSubset<T, recordUpdateArgs>
    ): CheckSelect<T, Prisma__recordClient<record>, Prisma__recordClient<recordGetPayload<T>>>

    /**
     * Delete zero or more Records.
     * @param {recordDeleteManyArgs} args - Arguments to filter Records to delete.
     * @example
     * // Delete a few Records
     * const { count } = await prisma.record.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends recordDeleteManyArgs>(
      args?: SelectSubset<T, recordDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Records
     * const record = await prisma.record.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends recordUpdateManyArgs>(
      args: SelectSubset<T, recordUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Record.
     * @param {recordUpsertArgs} args - Arguments to update or create a Record.
     * @example
     * // Update or create a Record
     * const record = await prisma.record.upsert({
     *   create: {
     *     // ... data to create a Record
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Record we want to update
     *   }
     * })
    **/
    upsert<T extends recordUpsertArgs>(
      args: SelectSubset<T, recordUpsertArgs>
    ): CheckSelect<T, Prisma__recordClient<record>, Prisma__recordClient<recordGetPayload<T>>>

    /**
     * Count the number of Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordCountArgs} args - Arguments to filter Records to count.
     * @example
     * // Count the number of Records
     * const count = await prisma.record.count({
     *   where: {
     *     // ... the filter for the Records we want to count
     *   }
     * })
    **/
    count<T extends recordCountArgs>(
      args?: Subset<T, recordCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Record.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordAggregateArgs>(args: Subset<T, RecordAggregateArgs>): PrismaPromise<GetRecordAggregateType<T>>

    /**
     * Group by Record.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecordGroupByArgs['orderBy'] }
        : { orderBy?: RecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for record.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__recordClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appointments<T extends appointmentsArgs = {}>(args?: Subset<T, appointmentsArgs>): CheckSelect<T, Prisma__appointmentsClient<appointments | null >, Prisma__appointmentsClient<appointmentsGetPayload<T> | null >>;

    record_type<T extends record_typeArgs = {}>(args?: Subset<T, record_typeArgs>): CheckSelect<T, Prisma__record_typeClient<record_type | null >, Prisma__record_typeClient<record_typeGetPayload<T> | null >>;

    record_file<T extends record_fileFindManyArgs = {}>(args?: Subset<T, record_fileFindManyArgs>): CheckSelect<T, PrismaPromise<Array<record_file>>, PrismaPromise<Array<record_fileGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * record findUnique
   */
  export type recordFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the record
     * 
    **/
    select?: recordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recordInclude | null
    /**
     * Throw an Error if a record can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which record to fetch.
     * 
    **/
    where: recordWhereUniqueInput
  }


  /**
   * record findFirst
   */
  export type recordFindFirstArgs = {
    /**
     * Select specific fields to fetch from the record
     * 
    **/
    select?: recordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recordInclude | null
    /**
     * Throw an Error if a record can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which record to fetch.
     * 
    **/
    where?: recordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records to fetch.
     * 
    **/
    orderBy?: Enumerable<recordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for records.
     * 
    **/
    cursor?: recordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of records.
     * 
    **/
    distinct?: Enumerable<RecordScalarFieldEnum>
  }


  /**
   * record findMany
   */
  export type recordFindManyArgs = {
    /**
     * Select specific fields to fetch from the record
     * 
    **/
    select?: recordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recordInclude | null
    /**
     * Filter, which records to fetch.
     * 
    **/
    where?: recordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records to fetch.
     * 
    **/
    orderBy?: Enumerable<recordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing records.
     * 
    **/
    cursor?: recordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RecordScalarFieldEnum>
  }


  /**
   * record create
   */
  export type recordCreateArgs = {
    /**
     * Select specific fields to fetch from the record
     * 
    **/
    select?: recordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recordInclude | null
    /**
     * The data needed to create a record.
     * 
    **/
    data: XOR<recordCreateInput, recordUncheckedCreateInput>
  }


  /**
   * record createMany
   */
  export type recordCreateManyArgs = {
    /**
     * The data used to create many records.
     * 
    **/
    data: Enumerable<recordCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * record update
   */
  export type recordUpdateArgs = {
    /**
     * Select specific fields to fetch from the record
     * 
    **/
    select?: recordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recordInclude | null
    /**
     * The data needed to update a record.
     * 
    **/
    data: XOR<recordUpdateInput, recordUncheckedUpdateInput>
    /**
     * Choose, which record to update.
     * 
    **/
    where: recordWhereUniqueInput
  }


  /**
   * record updateMany
   */
  export type recordUpdateManyArgs = {
    /**
     * The data used to update records.
     * 
    **/
    data: XOR<recordUpdateManyMutationInput, recordUncheckedUpdateManyInput>
    /**
     * Filter which records to update
     * 
    **/
    where?: recordWhereInput
  }


  /**
   * record upsert
   */
  export type recordUpsertArgs = {
    /**
     * Select specific fields to fetch from the record
     * 
    **/
    select?: recordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recordInclude | null
    /**
     * The filter to search for the record to update in case it exists.
     * 
    **/
    where: recordWhereUniqueInput
    /**
     * In case the record found by the `where` argument doesn't exist, create a new record with this data.
     * 
    **/
    create: XOR<recordCreateInput, recordUncheckedCreateInput>
    /**
     * In case the record was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<recordUpdateInput, recordUncheckedUpdateInput>
  }


  /**
   * record delete
   */
  export type recordDeleteArgs = {
    /**
     * Select specific fields to fetch from the record
     * 
    **/
    select?: recordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recordInclude | null
    /**
     * Filter which record to delete.
     * 
    **/
    where: recordWhereUniqueInput
  }


  /**
   * record deleteMany
   */
  export type recordDeleteManyArgs = {
    /**
     * Filter which records to delete
     * 
    **/
    where?: recordWhereInput
  }


  /**
   * record without action
   */
  export type recordArgs = {
    /**
     * Select specific fields to fetch from the record
     * 
    **/
    select?: recordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recordInclude | null
  }



  /**
   * Model record_file
   */


  export type AggregateRecord_file = {
    _count: Record_fileCountAggregateOutputType | null
    _avg: Record_fileAvgAggregateOutputType | null
    _sum: Record_fileSumAggregateOutputType | null
    _min: Record_fileMinAggregateOutputType | null
    _max: Record_fileMaxAggregateOutputType | null
  }

  export type Record_fileAvgAggregateOutputType = {
    id: number | null
    record_id: number | null
  }

  export type Record_fileSumAggregateOutputType = {
    id: number | null
    record_id: number | null
  }

  export type Record_fileMinAggregateOutputType = {
    id: number | null
    path: string | null
    record_id: number | null
  }

  export type Record_fileMaxAggregateOutputType = {
    id: number | null
    path: string | null
    record_id: number | null
  }

  export type Record_fileCountAggregateOutputType = {
    id: number
    path: number
    record_id: number
    _all: number
  }


  export type Record_fileAvgAggregateInputType = {
    id?: true
    record_id?: true
  }

  export type Record_fileSumAggregateInputType = {
    id?: true
    record_id?: true
  }

  export type Record_fileMinAggregateInputType = {
    id?: true
    path?: true
    record_id?: true
  }

  export type Record_fileMaxAggregateInputType = {
    id?: true
    path?: true
    record_id?: true
  }

  export type Record_fileCountAggregateInputType = {
    id?: true
    path?: true
    record_id?: true
    _all?: true
  }

  export type Record_fileAggregateArgs = {
    /**
     * Filter which record_file to aggregate.
     * 
    **/
    where?: record_fileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_files to fetch.
     * 
    **/
    orderBy?: Enumerable<record_fileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: record_fileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_files.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned record_files
    **/
    _count?: true | Record_fileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Record_fileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Record_fileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Record_fileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Record_fileMaxAggregateInputType
  }

  export type GetRecord_fileAggregateType<T extends Record_fileAggregateArgs> = {
        [P in keyof T & keyof AggregateRecord_file]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecord_file[P]>
      : GetScalarType<T[P], AggregateRecord_file[P]>
  }




  export type Record_fileGroupByArgs = {
    where?: record_fileWhereInput
    orderBy?: Enumerable<record_fileOrderByWithAggregationInput>
    by: Array<Record_fileScalarFieldEnum>
    having?: record_fileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Record_fileCountAggregateInputType | true
    _avg?: Record_fileAvgAggregateInputType
    _sum?: Record_fileSumAggregateInputType
    _min?: Record_fileMinAggregateInputType
    _max?: Record_fileMaxAggregateInputType
  }


  export type Record_fileGroupByOutputType = {
    id: number
    path: string
    record_id: number
    _count: Record_fileCountAggregateOutputType | null
    _avg: Record_fileAvgAggregateOutputType | null
    _sum: Record_fileSumAggregateOutputType | null
    _min: Record_fileMinAggregateOutputType | null
    _max: Record_fileMaxAggregateOutputType | null
  }

  type GetRecord_fileGroupByPayload<T extends Record_fileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Record_fileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Record_fileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Record_fileGroupByOutputType[P]>
            : GetScalarType<T[P], Record_fileGroupByOutputType[P]>
        }
      >
    >


  export type record_fileSelect = {
    id?: boolean
    path?: boolean
    record_id?: boolean
    record?: boolean | recordArgs
  }

  export type record_fileInclude = {
    record?: boolean | recordArgs
  }

  export type record_fileGetPayload<
    S extends boolean | null | undefined | record_fileArgs,
    U = keyof S
      > = S extends true
        ? record_file
    : S extends undefined
    ? never
    : S extends record_fileArgs | record_fileFindManyArgs
    ?'include' extends U
    ? record_file  & {
    [P in TrueKeys<S['include']>]:
        P extends 'record' ? recordGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'record' ? recordGetPayload<S['select'][P]> :  P extends keyof record_file ? record_file[P] : never
  } 
    : record_file
  : record_file


  type record_fileCountArgs = Merge<
    Omit<record_fileFindManyArgs, 'select' | 'include'> & {
      select?: Record_fileCountAggregateInputType | true
    }
  >

  export interface record_fileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Record_file that matches the filter.
     * @param {record_fileFindUniqueArgs} args - Arguments to find a Record_file
     * @example
     * // Get one Record_file
     * const record_file = await prisma.record_file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends record_fileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, record_fileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'record_file'> extends True ? CheckSelect<T, Prisma__record_fileClient<record_file>, Prisma__record_fileClient<record_fileGetPayload<T>>> : CheckSelect<T, Prisma__record_fileClient<record_file | null >, Prisma__record_fileClient<record_fileGetPayload<T> | null >>

    /**
     * Find the first Record_file that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_fileFindFirstArgs} args - Arguments to find a Record_file
     * @example
     * // Get one Record_file
     * const record_file = await prisma.record_file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends record_fileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, record_fileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'record_file'> extends True ? CheckSelect<T, Prisma__record_fileClient<record_file>, Prisma__record_fileClient<record_fileGetPayload<T>>> : CheckSelect<T, Prisma__record_fileClient<record_file | null >, Prisma__record_fileClient<record_fileGetPayload<T> | null >>

    /**
     * Find zero or more Record_files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_fileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Record_files
     * const record_files = await prisma.record_file.findMany()
     * 
     * // Get first 10 Record_files
     * const record_files = await prisma.record_file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const record_fileWithIdOnly = await prisma.record_file.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends record_fileFindManyArgs>(
      args?: SelectSubset<T, record_fileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<record_file>>, PrismaPromise<Array<record_fileGetPayload<T>>>>

    /**
     * Create a Record_file.
     * @param {record_fileCreateArgs} args - Arguments to create a Record_file.
     * @example
     * // Create one Record_file
     * const Record_file = await prisma.record_file.create({
     *   data: {
     *     // ... data to create a Record_file
     *   }
     * })
     * 
    **/
    create<T extends record_fileCreateArgs>(
      args: SelectSubset<T, record_fileCreateArgs>
    ): CheckSelect<T, Prisma__record_fileClient<record_file>, Prisma__record_fileClient<record_fileGetPayload<T>>>

    /**
     * Create many Record_files.
     *     @param {record_fileCreateManyArgs} args - Arguments to create many Record_files.
     *     @example
     *     // Create many Record_files
     *     const record_file = await prisma.record_file.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends record_fileCreateManyArgs>(
      args?: SelectSubset<T, record_fileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Record_file.
     * @param {record_fileDeleteArgs} args - Arguments to delete one Record_file.
     * @example
     * // Delete one Record_file
     * const Record_file = await prisma.record_file.delete({
     *   where: {
     *     // ... filter to delete one Record_file
     *   }
     * })
     * 
    **/
    delete<T extends record_fileDeleteArgs>(
      args: SelectSubset<T, record_fileDeleteArgs>
    ): CheckSelect<T, Prisma__record_fileClient<record_file>, Prisma__record_fileClient<record_fileGetPayload<T>>>

    /**
     * Update one Record_file.
     * @param {record_fileUpdateArgs} args - Arguments to update one Record_file.
     * @example
     * // Update one Record_file
     * const record_file = await prisma.record_file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends record_fileUpdateArgs>(
      args: SelectSubset<T, record_fileUpdateArgs>
    ): CheckSelect<T, Prisma__record_fileClient<record_file>, Prisma__record_fileClient<record_fileGetPayload<T>>>

    /**
     * Delete zero or more Record_files.
     * @param {record_fileDeleteManyArgs} args - Arguments to filter Record_files to delete.
     * @example
     * // Delete a few Record_files
     * const { count } = await prisma.record_file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends record_fileDeleteManyArgs>(
      args?: SelectSubset<T, record_fileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Record_files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_fileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Record_files
     * const record_file = await prisma.record_file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends record_fileUpdateManyArgs>(
      args: SelectSubset<T, record_fileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Record_file.
     * @param {record_fileUpsertArgs} args - Arguments to update or create a Record_file.
     * @example
     * // Update or create a Record_file
     * const record_file = await prisma.record_file.upsert({
     *   create: {
     *     // ... data to create a Record_file
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Record_file we want to update
     *   }
     * })
    **/
    upsert<T extends record_fileUpsertArgs>(
      args: SelectSubset<T, record_fileUpsertArgs>
    ): CheckSelect<T, Prisma__record_fileClient<record_file>, Prisma__record_fileClient<record_fileGetPayload<T>>>

    /**
     * Count the number of Record_files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_fileCountArgs} args - Arguments to filter Record_files to count.
     * @example
     * // Count the number of Record_files
     * const count = await prisma.record_file.count({
     *   where: {
     *     // ... the filter for the Record_files we want to count
     *   }
     * })
    **/
    count<T extends record_fileCountArgs>(
      args?: Subset<T, record_fileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Record_fileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Record_file.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Record_fileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Record_fileAggregateArgs>(args: Subset<T, Record_fileAggregateArgs>): PrismaPromise<GetRecord_fileAggregateType<T>>

    /**
     * Group by Record_file.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Record_fileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Record_fileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Record_fileGroupByArgs['orderBy'] }
        : { orderBy?: Record_fileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Record_fileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecord_fileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for record_file.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__record_fileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    record<T extends recordArgs = {}>(args?: Subset<T, recordArgs>): CheckSelect<T, Prisma__recordClient<record | null >, Prisma__recordClient<recordGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * record_file findUnique
   */
  export type record_fileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the record_file
     * 
    **/
    select?: record_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_fileInclude | null
    /**
     * Throw an Error if a record_file can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which record_file to fetch.
     * 
    **/
    where: record_fileWhereUniqueInput
  }


  /**
   * record_file findFirst
   */
  export type record_fileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the record_file
     * 
    **/
    select?: record_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_fileInclude | null
    /**
     * Throw an Error if a record_file can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which record_file to fetch.
     * 
    **/
    where?: record_fileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_files to fetch.
     * 
    **/
    orderBy?: Enumerable<record_fileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for record_files.
     * 
    **/
    cursor?: record_fileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_files.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of record_files.
     * 
    **/
    distinct?: Enumerable<Record_fileScalarFieldEnum>
  }


  /**
   * record_file findMany
   */
  export type record_fileFindManyArgs = {
    /**
     * Select specific fields to fetch from the record_file
     * 
    **/
    select?: record_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_fileInclude | null
    /**
     * Filter, which record_files to fetch.
     * 
    **/
    where?: record_fileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_files to fetch.
     * 
    **/
    orderBy?: Enumerable<record_fileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing record_files.
     * 
    **/
    cursor?: record_fileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_files.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Record_fileScalarFieldEnum>
  }


  /**
   * record_file create
   */
  export type record_fileCreateArgs = {
    /**
     * Select specific fields to fetch from the record_file
     * 
    **/
    select?: record_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_fileInclude | null
    /**
     * The data needed to create a record_file.
     * 
    **/
    data: XOR<record_fileCreateInput, record_fileUncheckedCreateInput>
  }


  /**
   * record_file createMany
   */
  export type record_fileCreateManyArgs = {
    /**
     * The data used to create many record_files.
     * 
    **/
    data: Enumerable<record_fileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * record_file update
   */
  export type record_fileUpdateArgs = {
    /**
     * Select specific fields to fetch from the record_file
     * 
    **/
    select?: record_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_fileInclude | null
    /**
     * The data needed to update a record_file.
     * 
    **/
    data: XOR<record_fileUpdateInput, record_fileUncheckedUpdateInput>
    /**
     * Choose, which record_file to update.
     * 
    **/
    where: record_fileWhereUniqueInput
  }


  /**
   * record_file updateMany
   */
  export type record_fileUpdateManyArgs = {
    /**
     * The data used to update record_files.
     * 
    **/
    data: XOR<record_fileUpdateManyMutationInput, record_fileUncheckedUpdateManyInput>
    /**
     * Filter which record_files to update
     * 
    **/
    where?: record_fileWhereInput
  }


  /**
   * record_file upsert
   */
  export type record_fileUpsertArgs = {
    /**
     * Select specific fields to fetch from the record_file
     * 
    **/
    select?: record_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_fileInclude | null
    /**
     * The filter to search for the record_file to update in case it exists.
     * 
    **/
    where: record_fileWhereUniqueInput
    /**
     * In case the record_file found by the `where` argument doesn't exist, create a new record_file with this data.
     * 
    **/
    create: XOR<record_fileCreateInput, record_fileUncheckedCreateInput>
    /**
     * In case the record_file was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<record_fileUpdateInput, record_fileUncheckedUpdateInput>
  }


  /**
   * record_file delete
   */
  export type record_fileDeleteArgs = {
    /**
     * Select specific fields to fetch from the record_file
     * 
    **/
    select?: record_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_fileInclude | null
    /**
     * Filter which record_file to delete.
     * 
    **/
    where: record_fileWhereUniqueInput
  }


  /**
   * record_file deleteMany
   */
  export type record_fileDeleteManyArgs = {
    /**
     * Filter which record_files to delete
     * 
    **/
    where?: record_fileWhereInput
  }


  /**
   * record_file without action
   */
  export type record_fileArgs = {
    /**
     * Select specific fields to fetch from the record_file
     * 
    **/
    select?: record_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_fileInclude | null
  }



  /**
   * Model record_type
   */


  export type AggregateRecord_type = {
    _count: Record_typeCountAggregateOutputType | null
    _avg: Record_typeAvgAggregateOutputType | null
    _sum: Record_typeSumAggregateOutputType | null
    _min: Record_typeMinAggregateOutputType | null
    _max: Record_typeMaxAggregateOutputType | null
  }

  export type Record_typeAvgAggregateOutputType = {
    id: number | null
  }

  export type Record_typeSumAggregateOutputType = {
    id: number | null
  }

  export type Record_typeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type Record_typeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type Record_typeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type Record_typeAvgAggregateInputType = {
    id?: true
  }

  export type Record_typeSumAggregateInputType = {
    id?: true
  }

  export type Record_typeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type Record_typeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type Record_typeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type Record_typeAggregateArgs = {
    /**
     * Filter which record_type to aggregate.
     * 
    **/
    where?: record_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_types to fetch.
     * 
    **/
    orderBy?: Enumerable<record_typeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: record_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_types.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned record_types
    **/
    _count?: true | Record_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Record_typeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Record_typeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Record_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Record_typeMaxAggregateInputType
  }

  export type GetRecord_typeAggregateType<T extends Record_typeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecord_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecord_type[P]>
      : GetScalarType<T[P], AggregateRecord_type[P]>
  }




  export type Record_typeGroupByArgs = {
    where?: record_typeWhereInput
    orderBy?: Enumerable<record_typeOrderByWithAggregationInput>
    by: Array<Record_typeScalarFieldEnum>
    having?: record_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Record_typeCountAggregateInputType | true
    _avg?: Record_typeAvgAggregateInputType
    _sum?: Record_typeSumAggregateInputType
    _min?: Record_typeMinAggregateInputType
    _max?: Record_typeMaxAggregateInputType
  }


  export type Record_typeGroupByOutputType = {
    id: number
    name: string
    description: string | null
    _count: Record_typeCountAggregateOutputType | null
    _avg: Record_typeAvgAggregateOutputType | null
    _sum: Record_typeSumAggregateOutputType | null
    _min: Record_typeMinAggregateOutputType | null
    _max: Record_typeMaxAggregateOutputType | null
  }

  type GetRecord_typeGroupByPayload<T extends Record_typeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Record_typeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Record_typeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Record_typeGroupByOutputType[P]>
            : GetScalarType<T[P], Record_typeGroupByOutputType[P]>
        }
      >
    >


  export type record_typeSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    record?: boolean | recordFindManyArgs
    _count?: boolean | Record_typeCountOutputTypeArgs
  }

  export type record_typeInclude = {
    record?: boolean | recordFindManyArgs
    _count?: boolean | Record_typeCountOutputTypeArgs
  }

  export type record_typeGetPayload<
    S extends boolean | null | undefined | record_typeArgs,
    U = keyof S
      > = S extends true
        ? record_type
    : S extends undefined
    ? never
    : S extends record_typeArgs | record_typeFindManyArgs
    ?'include' extends U
    ? record_type  & {
    [P in TrueKeys<S['include']>]:
        P extends 'record' ? Array < recordGetPayload<S['include'][P]>>  :
        P extends '_count' ? Record_typeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'record' ? Array < recordGetPayload<S['select'][P]>>  :
        P extends '_count' ? Record_typeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof record_type ? record_type[P] : never
  } 
    : record_type
  : record_type


  type record_typeCountArgs = Merge<
    Omit<record_typeFindManyArgs, 'select' | 'include'> & {
      select?: Record_typeCountAggregateInputType | true
    }
  >

  export interface record_typeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Record_type that matches the filter.
     * @param {record_typeFindUniqueArgs} args - Arguments to find a Record_type
     * @example
     * // Get one Record_type
     * const record_type = await prisma.record_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends record_typeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, record_typeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'record_type'> extends True ? CheckSelect<T, Prisma__record_typeClient<record_type>, Prisma__record_typeClient<record_typeGetPayload<T>>> : CheckSelect<T, Prisma__record_typeClient<record_type | null >, Prisma__record_typeClient<record_typeGetPayload<T> | null >>

    /**
     * Find the first Record_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeFindFirstArgs} args - Arguments to find a Record_type
     * @example
     * // Get one Record_type
     * const record_type = await prisma.record_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends record_typeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, record_typeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'record_type'> extends True ? CheckSelect<T, Prisma__record_typeClient<record_type>, Prisma__record_typeClient<record_typeGetPayload<T>>> : CheckSelect<T, Prisma__record_typeClient<record_type | null >, Prisma__record_typeClient<record_typeGetPayload<T> | null >>

    /**
     * Find zero or more Record_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Record_types
     * const record_types = await prisma.record_type.findMany()
     * 
     * // Get first 10 Record_types
     * const record_types = await prisma.record_type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const record_typeWithIdOnly = await prisma.record_type.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends record_typeFindManyArgs>(
      args?: SelectSubset<T, record_typeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<record_type>>, PrismaPromise<Array<record_typeGetPayload<T>>>>

    /**
     * Create a Record_type.
     * @param {record_typeCreateArgs} args - Arguments to create a Record_type.
     * @example
     * // Create one Record_type
     * const Record_type = await prisma.record_type.create({
     *   data: {
     *     // ... data to create a Record_type
     *   }
     * })
     * 
    **/
    create<T extends record_typeCreateArgs>(
      args: SelectSubset<T, record_typeCreateArgs>
    ): CheckSelect<T, Prisma__record_typeClient<record_type>, Prisma__record_typeClient<record_typeGetPayload<T>>>

    /**
     * Create many Record_types.
     *     @param {record_typeCreateManyArgs} args - Arguments to create many Record_types.
     *     @example
     *     // Create many Record_types
     *     const record_type = await prisma.record_type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends record_typeCreateManyArgs>(
      args?: SelectSubset<T, record_typeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Record_type.
     * @param {record_typeDeleteArgs} args - Arguments to delete one Record_type.
     * @example
     * // Delete one Record_type
     * const Record_type = await prisma.record_type.delete({
     *   where: {
     *     // ... filter to delete one Record_type
     *   }
     * })
     * 
    **/
    delete<T extends record_typeDeleteArgs>(
      args: SelectSubset<T, record_typeDeleteArgs>
    ): CheckSelect<T, Prisma__record_typeClient<record_type>, Prisma__record_typeClient<record_typeGetPayload<T>>>

    /**
     * Update one Record_type.
     * @param {record_typeUpdateArgs} args - Arguments to update one Record_type.
     * @example
     * // Update one Record_type
     * const record_type = await prisma.record_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends record_typeUpdateArgs>(
      args: SelectSubset<T, record_typeUpdateArgs>
    ): CheckSelect<T, Prisma__record_typeClient<record_type>, Prisma__record_typeClient<record_typeGetPayload<T>>>

    /**
     * Delete zero or more Record_types.
     * @param {record_typeDeleteManyArgs} args - Arguments to filter Record_types to delete.
     * @example
     * // Delete a few Record_types
     * const { count } = await prisma.record_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends record_typeDeleteManyArgs>(
      args?: SelectSubset<T, record_typeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Record_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Record_types
     * const record_type = await prisma.record_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends record_typeUpdateManyArgs>(
      args: SelectSubset<T, record_typeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Record_type.
     * @param {record_typeUpsertArgs} args - Arguments to update or create a Record_type.
     * @example
     * // Update or create a Record_type
     * const record_type = await prisma.record_type.upsert({
     *   create: {
     *     // ... data to create a Record_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Record_type we want to update
     *   }
     * })
    **/
    upsert<T extends record_typeUpsertArgs>(
      args: SelectSubset<T, record_typeUpsertArgs>
    ): CheckSelect<T, Prisma__record_typeClient<record_type>, Prisma__record_typeClient<record_typeGetPayload<T>>>

    /**
     * Count the number of Record_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeCountArgs} args - Arguments to filter Record_types to count.
     * @example
     * // Count the number of Record_types
     * const count = await prisma.record_type.count({
     *   where: {
     *     // ... the filter for the Record_types we want to count
     *   }
     * })
    **/
    count<T extends record_typeCountArgs>(
      args?: Subset<T, record_typeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Record_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Record_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Record_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Record_typeAggregateArgs>(args: Subset<T, Record_typeAggregateArgs>): PrismaPromise<GetRecord_typeAggregateType<T>>

    /**
     * Group by Record_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Record_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Record_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Record_typeGroupByArgs['orderBy'] }
        : { orderBy?: Record_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Record_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecord_typeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for record_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__record_typeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    record<T extends recordFindManyArgs = {}>(args?: Subset<T, recordFindManyArgs>): CheckSelect<T, PrismaPromise<Array<record>>, PrismaPromise<Array<recordGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * record_type findUnique
   */
  export type record_typeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the record_type
     * 
    **/
    select?: record_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_typeInclude | null
    /**
     * Throw an Error if a record_type can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which record_type to fetch.
     * 
    **/
    where: record_typeWhereUniqueInput
  }


  /**
   * record_type findFirst
   */
  export type record_typeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the record_type
     * 
    **/
    select?: record_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_typeInclude | null
    /**
     * Throw an Error if a record_type can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which record_type to fetch.
     * 
    **/
    where?: record_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_types to fetch.
     * 
    **/
    orderBy?: Enumerable<record_typeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for record_types.
     * 
    **/
    cursor?: record_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_types.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of record_types.
     * 
    **/
    distinct?: Enumerable<Record_typeScalarFieldEnum>
  }


  /**
   * record_type findMany
   */
  export type record_typeFindManyArgs = {
    /**
     * Select specific fields to fetch from the record_type
     * 
    **/
    select?: record_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_typeInclude | null
    /**
     * Filter, which record_types to fetch.
     * 
    **/
    where?: record_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_types to fetch.
     * 
    **/
    orderBy?: Enumerable<record_typeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing record_types.
     * 
    **/
    cursor?: record_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_types from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_types.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Record_typeScalarFieldEnum>
  }


  /**
   * record_type create
   */
  export type record_typeCreateArgs = {
    /**
     * Select specific fields to fetch from the record_type
     * 
    **/
    select?: record_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_typeInclude | null
    /**
     * The data needed to create a record_type.
     * 
    **/
    data: XOR<record_typeCreateInput, record_typeUncheckedCreateInput>
  }


  /**
   * record_type createMany
   */
  export type record_typeCreateManyArgs = {
    /**
     * The data used to create many record_types.
     * 
    **/
    data: Enumerable<record_typeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * record_type update
   */
  export type record_typeUpdateArgs = {
    /**
     * Select specific fields to fetch from the record_type
     * 
    **/
    select?: record_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_typeInclude | null
    /**
     * The data needed to update a record_type.
     * 
    **/
    data: XOR<record_typeUpdateInput, record_typeUncheckedUpdateInput>
    /**
     * Choose, which record_type to update.
     * 
    **/
    where: record_typeWhereUniqueInput
  }


  /**
   * record_type updateMany
   */
  export type record_typeUpdateManyArgs = {
    /**
     * The data used to update record_types.
     * 
    **/
    data: XOR<record_typeUpdateManyMutationInput, record_typeUncheckedUpdateManyInput>
    /**
     * Filter which record_types to update
     * 
    **/
    where?: record_typeWhereInput
  }


  /**
   * record_type upsert
   */
  export type record_typeUpsertArgs = {
    /**
     * Select specific fields to fetch from the record_type
     * 
    **/
    select?: record_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_typeInclude | null
    /**
     * The filter to search for the record_type to update in case it exists.
     * 
    **/
    where: record_typeWhereUniqueInput
    /**
     * In case the record_type found by the `where` argument doesn't exist, create a new record_type with this data.
     * 
    **/
    create: XOR<record_typeCreateInput, record_typeUncheckedCreateInput>
    /**
     * In case the record_type was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<record_typeUpdateInput, record_typeUncheckedUpdateInput>
  }


  /**
   * record_type delete
   */
  export type record_typeDeleteArgs = {
    /**
     * Select specific fields to fetch from the record_type
     * 
    **/
    select?: record_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_typeInclude | null
    /**
     * Filter which record_type to delete.
     * 
    **/
    where: record_typeWhereUniqueInput
  }


  /**
   * record_type deleteMany
   */
  export type record_typeDeleteManyArgs = {
    /**
     * Filter which record_types to delete
     * 
    **/
    where?: record_typeWhereInput
  }


  /**
   * record_type without action
   */
  export type record_typeArgs = {
    /**
     * Select specific fields to fetch from the record_type
     * 
    **/
    select?: record_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: record_typeInclude | null
  }



  /**
   * Model role
   */


  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
    privileges: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    privileges: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    privileges: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    privileges?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    privileges?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    privileges?: true
    _all?: true
  }

  export type RoleAggregateArgs = {
    /**
     * Filter which role to aggregate.
     * 
    **/
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs = {
    where?: roleWhereInput
    orderBy?: Enumerable<roleOrderByWithAggregationInput>
    by: Array<RoleScalarFieldEnum>
    having?: roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }


  export type RoleGroupByOutputType = {
    id: number
    name: string
    privileges: string | null
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type roleSelect = {
    id?: boolean
    name?: boolean
    privileges?: boolean
    user?: boolean | userFindManyArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type roleInclude = {
    user?: boolean | userFindManyArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type roleGetPayload<
    S extends boolean | null | undefined | roleArgs,
    U = keyof S
      > = S extends true
        ? role
    : S extends undefined
    ? never
    : S extends roleArgs | roleFindManyArgs
    ?'include' extends U
    ? role  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? Array < userGetPayload<S['include'][P]>>  :
        P extends '_count' ? RoleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? Array < userGetPayload<S['select'][P]>>  :
        P extends '_count' ? RoleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof role ? role[P] : never
  } 
    : role
  : role


  type roleCountArgs = Merge<
    Omit<roleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }
  >

  export interface roleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Role that matches the filter.
     * @param {roleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends roleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, roleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'role'> extends True ? CheckSelect<T, Prisma__roleClient<role>, Prisma__roleClient<roleGetPayload<T>>> : CheckSelect<T, Prisma__roleClient<role | null >, Prisma__roleClient<roleGetPayload<T> | null >>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends roleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, roleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'role'> extends True ? CheckSelect<T, Prisma__roleClient<role>, Prisma__roleClient<roleGetPayload<T>>> : CheckSelect<T, Prisma__roleClient<role | null >, Prisma__roleClient<roleGetPayload<T> | null >>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends roleFindManyArgs>(
      args?: SelectSubset<T, roleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<role>>, PrismaPromise<Array<roleGetPayload<T>>>>

    /**
     * Create a Role.
     * @param {roleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends roleCreateArgs>(
      args: SelectSubset<T, roleCreateArgs>
    ): CheckSelect<T, Prisma__roleClient<role>, Prisma__roleClient<roleGetPayload<T>>>

    /**
     * Create many Roles.
     *     @param {roleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends roleCreateManyArgs>(
      args?: SelectSubset<T, roleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {roleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends roleDeleteArgs>(
      args: SelectSubset<T, roleDeleteArgs>
    ): CheckSelect<T, Prisma__roleClient<role>, Prisma__roleClient<roleGetPayload<T>>>

    /**
     * Update one Role.
     * @param {roleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends roleUpdateArgs>(
      args: SelectSubset<T, roleUpdateArgs>
    ): CheckSelect<T, Prisma__roleClient<role>, Prisma__roleClient<roleGetPayload<T>>>

    /**
     * Delete zero or more Roles.
     * @param {roleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends roleDeleteManyArgs>(
      args?: SelectSubset<T, roleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends roleUpdateManyArgs>(
      args: SelectSubset<T, roleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {roleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends roleUpsertArgs>(
      args: SelectSubset<T, roleUpsertArgs>
    ): CheckSelect<T, Prisma__roleClient<role>, Prisma__roleClient<roleGetPayload<T>>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends roleCountArgs>(
      args?: Subset<T, roleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__roleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userFindManyArgs = {}>(args?: Subset<T, userFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * role findUnique
   */
  export type roleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the role
     * 
    **/
    select?: roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roleInclude | null
    /**
     * Throw an Error if a role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which role to fetch.
     * 
    **/
    where: roleWhereUniqueInput
  }


  /**
   * role findFirst
   */
  export type roleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the role
     * 
    **/
    select?: roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roleInclude | null
    /**
     * Throw an Error if a role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which role to fetch.
     * 
    **/
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     * 
    **/
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     * 
    **/
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * role findMany
   */
  export type roleFindManyArgs = {
    /**
     * Select specific fields to fetch from the role
     * 
    **/
    select?: roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roleInclude | null
    /**
     * Filter, which roles to fetch.
     * 
    **/
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     * 
    **/
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * role create
   */
  export type roleCreateArgs = {
    /**
     * Select specific fields to fetch from the role
     * 
    **/
    select?: roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roleInclude | null
    /**
     * The data needed to create a role.
     * 
    **/
    data: XOR<roleCreateInput, roleUncheckedCreateInput>
  }


  /**
   * role createMany
   */
  export type roleCreateManyArgs = {
    /**
     * The data used to create many roles.
     * 
    **/
    data: Enumerable<roleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * role update
   */
  export type roleUpdateArgs = {
    /**
     * Select specific fields to fetch from the role
     * 
    **/
    select?: roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roleInclude | null
    /**
     * The data needed to update a role.
     * 
    **/
    data: XOR<roleUpdateInput, roleUncheckedUpdateInput>
    /**
     * Choose, which role to update.
     * 
    **/
    where: roleWhereUniqueInput
  }


  /**
   * role updateMany
   */
  export type roleUpdateManyArgs = {
    /**
     * The data used to update roles.
     * 
    **/
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     * 
    **/
    where?: roleWhereInput
  }


  /**
   * role upsert
   */
  export type roleUpsertArgs = {
    /**
     * Select specific fields to fetch from the role
     * 
    **/
    select?: roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roleInclude | null
    /**
     * The filter to search for the role to update in case it exists.
     * 
    **/
    where: roleWhereUniqueInput
    /**
     * In case the role found by the `where` argument doesn't exist, create a new role with this data.
     * 
    **/
    create: XOR<roleCreateInput, roleUncheckedCreateInput>
    /**
     * In case the role was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<roleUpdateInput, roleUncheckedUpdateInput>
  }


  /**
   * role delete
   */
  export type roleDeleteArgs = {
    /**
     * Select specific fields to fetch from the role
     * 
    **/
    select?: roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roleInclude | null
    /**
     * Filter which role to delete.
     * 
    **/
    where: roleWhereUniqueInput
  }


  /**
   * role deleteMany
   */
  export type roleDeleteManyArgs = {
    /**
     * Filter which roles to delete
     * 
    **/
    where?: roleWhereInput
  }


  /**
   * role without action
   */
  export type roleArgs = {
    /**
     * Select specific fields to fetch from the role
     * 
    **/
    select?: roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roleInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    mname: string | null
    lname: string | null
    phone: string | null
    email: string | null
    address: string | null
    birthdate: Date | null
    role_id: number | null
    password: string | null
    passwordChangedAt: Date | null
    passwordResetToken: string | null
    passwordResetTokenExpiry: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    mname: string | null
    lname: string | null
    phone: string | null
    email: string | null
    address: string | null
    birthdate: Date | null
    role_id: number | null
    password: string | null
    passwordChangedAt: Date | null
    passwordResetToken: string | null
    passwordResetTokenExpiry: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    mname: number
    lname: number
    phone: number
    email: number
    address: number
    birthdate: number
    role_id: number
    password: number
    passwordChangedAt: number
    passwordResetToken: number
    passwordResetTokenExpiry: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    mname?: true
    lname?: true
    phone?: true
    email?: true
    address?: true
    birthdate?: true
    role_id?: true
    password?: true
    passwordChangedAt?: true
    passwordResetToken?: true
    passwordResetTokenExpiry?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    mname?: true
    lname?: true
    phone?: true
    email?: true
    address?: true
    birthdate?: true
    role_id?: true
    password?: true
    passwordChangedAt?: true
    passwordResetToken?: true
    passwordResetTokenExpiry?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    mname?: true
    lname?: true
    phone?: true
    email?: true
    address?: true
    birthdate?: true
    role_id?: true
    password?: true
    passwordChangedAt?: true
    passwordResetToken?: true
    passwordResetTokenExpiry?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email: string | null
    address: string | null
    birthdate: Date | null
    role_id: number
    password: string
    passwordChangedAt: Date | null
    passwordResetToken: string | null
    passwordResetTokenExpiry: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    name?: boolean
    mname?: boolean
    lname?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    birthdate?: boolean
    role_id?: boolean
    password?: boolean
    passwordChangedAt?: boolean
    passwordResetToken?: boolean
    passwordResetTokenExpiry?: boolean
    role?: boolean | roleArgs
    appointments_appointments_dr_national_idTouser?: boolean | appointmentsFindManyArgs
    appointments_appointments_patient_national_idTouser?: boolean | appointmentsFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userInclude = {
    role?: boolean | roleArgs
    appointments_appointments_dr_national_idTouser?: boolean | appointmentsFindManyArgs
    appointments_appointments_patient_national_idTouser?: boolean | appointmentsFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]:
        P extends 'role' ? roleGetPayload<S['include'][P]> :
        P extends 'appointments_appointments_dr_national_idTouser' ? Array < appointmentsGetPayload<S['include'][P]>>  :
        P extends 'appointments_appointments_patient_national_idTouser' ? Array < appointmentsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'role' ? roleGetPayload<S['select'][P]> :
        P extends 'appointments_appointments_dr_national_idTouser' ? Array < appointmentsGetPayload<S['select'][P]>>  :
        P extends 'appointments_appointments_patient_national_idTouser' ? Array < appointmentsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    role<T extends roleArgs = {}>(args?: Subset<T, roleArgs>): CheckSelect<T, Prisma__roleClient<role | null >, Prisma__roleClient<roleGetPayload<T> | null >>;

    appointments_appointments_dr_national_idTouser<T extends appointmentsFindManyArgs = {}>(args?: Subset<T, appointmentsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<appointments>>, PrismaPromise<Array<appointmentsGetPayload<T>>>>;

    appointments_appointments_patient_national_idTouser<T extends appointmentsFindManyArgs = {}>(args?: Subset<T, appointmentsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<appointments>>, PrismaPromise<Array<appointmentsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AppointmentsScalarFieldEnum: {
    id: 'id',
    appointment_date: 'appointment_date',
    appointment_from: 'appointment_from',
    appointment_to: 'appointment_to',
    dr_national_id: 'dr_national_id',
    patient_national_id: 'patient_national_id'
  };

  export type AppointmentsScalarFieldEnum = (typeof AppointmentsScalarFieldEnum)[keyof typeof AppointmentsScalarFieldEnum]


  export const RecordScalarFieldEnum: {
    id: 'id',
    date: 'date',
    description: 'description',
    appointments_id: 'appointments_id',
    record_type_id: 'record_type_id'
  };

  export type RecordScalarFieldEnum = (typeof RecordScalarFieldEnum)[keyof typeof RecordScalarFieldEnum]


  export const Record_fileScalarFieldEnum: {
    id: 'id',
    path: 'path',
    record_id: 'record_id'
  };

  export type Record_fileScalarFieldEnum = (typeof Record_fileScalarFieldEnum)[keyof typeof Record_fileScalarFieldEnum]


  export const Record_typeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type Record_typeScalarFieldEnum = (typeof Record_typeScalarFieldEnum)[keyof typeof Record_typeScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    privileges: 'privileges'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mname: 'mname',
    lname: 'lname',
    phone: 'phone',
    email: 'email',
    address: 'address',
    birthdate: 'birthdate',
    role_id: 'role_id',
    password: 'password',
    passwordChangedAt: 'passwordChangedAt',
    passwordResetToken: 'passwordResetToken',
    passwordResetTokenExpiry: 'passwordResetTokenExpiry'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type appointmentsWhereInput = {
    AND?: Enumerable<appointmentsWhereInput>
    OR?: Enumerable<appointmentsWhereInput>
    NOT?: Enumerable<appointmentsWhereInput>
    id?: IntFilter | number
    appointment_date?: DateTimeFilter | Date | string
    appointment_from?: DateTimeFilter | Date | string
    appointment_to?: DateTimeFilter | Date | string
    dr_national_id?: IntFilter | number
    patient_national_id?: IntFilter | number
    user_appointments_dr_national_idTouser?: XOR<UserRelationFilter, userWhereInput>
    user_appointments_patient_national_idTouser?: XOR<UserRelationFilter, userWhereInput>
    record?: RecordListRelationFilter
  }

  export type appointmentsOrderByWithRelationInput = {
    id?: SortOrder
    appointment_date?: SortOrder
    appointment_from?: SortOrder
    appointment_to?: SortOrder
    dr_national_id?: SortOrder
    patient_national_id?: SortOrder
    user_appointments_dr_national_idTouser?: userOrderByWithRelationInput
    user_appointments_patient_national_idTouser?: userOrderByWithRelationInput
    record?: recordOrderByRelationAggregateInput
  }

  export type appointmentsWhereUniqueInput = {
    id_dr_national_id_patient_national_id?: appointmentsIdDr_national_idPatient_national_idCompoundUniqueInput
  }

  export type appointmentsOrderByWithAggregationInput = {
    id?: SortOrder
    appointment_date?: SortOrder
    appointment_from?: SortOrder
    appointment_to?: SortOrder
    dr_national_id?: SortOrder
    patient_national_id?: SortOrder
    _count?: appointmentsCountOrderByAggregateInput
    _avg?: appointmentsAvgOrderByAggregateInput
    _max?: appointmentsMaxOrderByAggregateInput
    _min?: appointmentsMinOrderByAggregateInput
    _sum?: appointmentsSumOrderByAggregateInput
  }

  export type appointmentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<appointmentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<appointmentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<appointmentsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    appointment_date?: DateTimeWithAggregatesFilter | Date | string
    appointment_from?: DateTimeWithAggregatesFilter | Date | string
    appointment_to?: DateTimeWithAggregatesFilter | Date | string
    dr_national_id?: IntWithAggregatesFilter | number
    patient_national_id?: IntWithAggregatesFilter | number
  }

  export type recordWhereInput = {
    AND?: Enumerable<recordWhereInput>
    OR?: Enumerable<recordWhereInput>
    NOT?: Enumerable<recordWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    description?: StringNullableFilter | string | null
    appointments_id?: IntFilter | number
    record_type_id?: IntFilter | number
    appointments?: XOR<AppointmentsRelationFilter, appointmentsWhereInput>
    record_type?: XOR<Record_typeRelationFilter, record_typeWhereInput>
    record_file?: Record_fileListRelationFilter
  }

  export type recordOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    appointments_id?: SortOrder
    record_type_id?: SortOrder
    appointments?: appointmentsOrderByWithRelationInput
    record_type?: record_typeOrderByWithRelationInput
    record_file?: record_fileOrderByRelationAggregateInput
  }

  export type recordWhereUniqueInput = {
    id?: number
  }

  export type recordOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    appointments_id?: SortOrder
    record_type_id?: SortOrder
    _count?: recordCountOrderByAggregateInput
    _avg?: recordAvgOrderByAggregateInput
    _max?: recordMaxOrderByAggregateInput
    _min?: recordMinOrderByAggregateInput
    _sum?: recordSumOrderByAggregateInput
  }

  export type recordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<recordScalarWhereWithAggregatesInput>
    OR?: Enumerable<recordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<recordScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    description?: StringNullableWithAggregatesFilter | string | null
    appointments_id?: IntWithAggregatesFilter | number
    record_type_id?: IntWithAggregatesFilter | number
  }

  export type record_fileWhereInput = {
    AND?: Enumerable<record_fileWhereInput>
    OR?: Enumerable<record_fileWhereInput>
    NOT?: Enumerable<record_fileWhereInput>
    id?: IntFilter | number
    path?: StringFilter | string
    record_id?: IntFilter | number
    record?: XOR<RecordRelationFilter, recordWhereInput>
  }

  export type record_fileOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    record_id?: SortOrder
    record?: recordOrderByWithRelationInput
  }

  export type record_fileWhereUniqueInput = {
    id?: number
  }

  export type record_fileOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    record_id?: SortOrder
    _count?: record_fileCountOrderByAggregateInput
    _avg?: record_fileAvgOrderByAggregateInput
    _max?: record_fileMaxOrderByAggregateInput
    _min?: record_fileMinOrderByAggregateInput
    _sum?: record_fileSumOrderByAggregateInput
  }

  export type record_fileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<record_fileScalarWhereWithAggregatesInput>
    OR?: Enumerable<record_fileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<record_fileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    path?: StringWithAggregatesFilter | string
    record_id?: IntWithAggregatesFilter | number
  }

  export type record_typeWhereInput = {
    AND?: Enumerable<record_typeWhereInput>
    OR?: Enumerable<record_typeWhereInput>
    NOT?: Enumerable<record_typeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    record?: RecordListRelationFilter
  }

  export type record_typeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    record?: recordOrderByRelationAggregateInput
  }

  export type record_typeWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type record_typeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: record_typeCountOrderByAggregateInput
    _avg?: record_typeAvgOrderByAggregateInput
    _max?: record_typeMaxOrderByAggregateInput
    _min?: record_typeMinOrderByAggregateInput
    _sum?: record_typeSumOrderByAggregateInput
  }

  export type record_typeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<record_typeScalarWhereWithAggregatesInput>
    OR?: Enumerable<record_typeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<record_typeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
  }

  export type roleWhereInput = {
    AND?: Enumerable<roleWhereInput>
    OR?: Enumerable<roleWhereInput>
    NOT?: Enumerable<roleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    privileges?: StringNullableFilter | string | null
    user?: UserListRelationFilter
  }

  export type roleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    privileges?: SortOrder
    user?: userOrderByRelationAggregateInput
  }

  export type roleWhereUniqueInput = {
    id?: number
  }

  export type roleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    privileges?: SortOrder
    _count?: roleCountOrderByAggregateInput
    _avg?: roleAvgOrderByAggregateInput
    _max?: roleMaxOrderByAggregateInput
    _min?: roleMinOrderByAggregateInput
    _sum?: roleSumOrderByAggregateInput
  }

  export type roleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<roleScalarWhereWithAggregatesInput>
    OR?: Enumerable<roleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<roleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    privileges?: StringNullableWithAggregatesFilter | string | null
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    mname?: StringFilter | string
    lname?: StringFilter | string
    phone?: StringFilter | string
    email?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    birthdate?: DateTimeNullableFilter | Date | string | null
    role_id?: IntFilter | number
    password?: StringFilter | string
    passwordChangedAt?: DateTimeNullableFilter | Date | string | null
    passwordResetToken?: StringNullableFilter | string | null
    passwordResetTokenExpiry?: DateTimeNullableFilter | Date | string | null
    role?: XOR<RoleRelationFilter, roleWhereInput>
    appointments_appointments_dr_national_idTouser?: AppointmentsListRelationFilter
    appointments_appointments_patient_national_idTouser?: AppointmentsListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    mname?: SortOrder
    lname?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    birthdate?: SortOrder
    role_id?: SortOrder
    password?: SortOrder
    passwordChangedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetTokenExpiry?: SortOrder
    role?: roleOrderByWithRelationInput
    appointments_appointments_dr_national_idTouser?: appointmentsOrderByRelationAggregateInput
    appointments_appointments_patient_national_idTouser?: appointmentsOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    mname?: SortOrder
    lname?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    birthdate?: SortOrder
    role_id?: SortOrder
    password?: SortOrder
    passwordChangedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetTokenExpiry?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    mname?: StringWithAggregatesFilter | string
    lname?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    birthdate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    role_id?: IntWithAggregatesFilter | number
    password?: StringWithAggregatesFilter | string
    passwordChangedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    passwordResetToken?: StringNullableWithAggregatesFilter | string | null
    passwordResetTokenExpiry?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type appointmentsCreateInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    user_appointments_dr_national_idTouser: userCreateNestedOneWithoutAppointments_appointments_dr_national_idTouserInput
    user_appointments_patient_national_idTouser: userCreateNestedOneWithoutAppointments_appointments_patient_national_idTouserInput
    record?: recordCreateNestedManyWithoutAppointmentsInput
  }

  export type appointmentsUncheckedCreateInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    dr_national_id: number
    patient_national_id: number
    record?: recordUncheckedCreateNestedManyWithoutAppointmentsInput
  }

  export type appointmentsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    user_appointments_dr_national_idTouser?: userUpdateOneRequiredWithoutAppointments_appointments_dr_national_idTouserInput
    user_appointments_patient_national_idTouser?: userUpdateOneRequiredWithoutAppointments_appointments_patient_national_idTouserInput
    record?: recordUpdateManyWithoutAppointmentsInput
  }

  export type appointmentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    dr_national_id?: IntFieldUpdateOperationsInput | number
    patient_national_id?: IntFieldUpdateOperationsInput | number
    record?: recordUncheckedUpdateManyWithoutAppointmentsInput
  }

  export type appointmentsCreateManyInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    dr_national_id: number
    patient_national_id: number
  }

  export type appointmentsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type appointmentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    dr_national_id?: IntFieldUpdateOperationsInput | number
    patient_national_id?: IntFieldUpdateOperationsInput | number
  }

  export type recordCreateInput = {
    date: Date | string
    description?: string | null
    appointments: appointmentsCreateNestedOneWithoutRecordInput
    record_type: record_typeCreateNestedOneWithoutRecordInput
    record_file?: record_fileCreateNestedManyWithoutRecordInput
  }

  export type recordUncheckedCreateInput = {
    id?: number
    date: Date | string
    description?: string | null
    appointments_id: number
    record_type_id: number
    record_file?: record_fileUncheckedCreateNestedManyWithoutRecordInput
  }

  export type recordUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    appointments?: appointmentsUpdateOneRequiredWithoutRecordInput
    record_type?: record_typeUpdateOneRequiredWithoutRecordInput
    record_file?: record_fileUpdateManyWithoutRecordInput
  }

  export type recordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    appointments_id?: IntFieldUpdateOperationsInput | number
    record_type_id?: IntFieldUpdateOperationsInput | number
    record_file?: record_fileUncheckedUpdateManyWithoutRecordInput
  }

  export type recordCreateManyInput = {
    id?: number
    date: Date | string
    description?: string | null
    appointments_id: number
    record_type_id: number
  }

  export type recordUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type recordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    appointments_id?: IntFieldUpdateOperationsInput | number
    record_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type record_fileCreateInput = {
    path: string
    record: recordCreateNestedOneWithoutRecord_fileInput
  }

  export type record_fileUncheckedCreateInput = {
    id?: number
    path: string
    record_id: number
  }

  export type record_fileUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    record?: recordUpdateOneRequiredWithoutRecord_fileInput
  }

  export type record_fileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    record_id?: IntFieldUpdateOperationsInput | number
  }

  export type record_fileCreateManyInput = {
    id?: number
    path: string
    record_id: number
  }

  export type record_fileUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type record_fileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    record_id?: IntFieldUpdateOperationsInput | number
  }

  export type record_typeCreateInput = {
    id: number
    name: string
    description?: string | null
    record?: recordCreateNestedManyWithoutRecord_typeInput
  }

  export type record_typeUncheckedCreateInput = {
    id: number
    name: string
    description?: string | null
    record?: recordUncheckedCreateNestedManyWithoutRecord_typeInput
  }

  export type record_typeUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    record?: recordUpdateManyWithoutRecord_typeInput
  }

  export type record_typeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    record?: recordUncheckedUpdateManyWithoutRecord_typeInput
  }

  export type record_typeCreateManyInput = {
    id: number
    name: string
    description?: string | null
  }

  export type record_typeUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type record_typeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type roleCreateInput = {
    name: string
    privileges?: string | null
    user?: userCreateNestedManyWithoutRoleInput
  }

  export type roleUncheckedCreateInput = {
    id?: number
    name: string
    privileges?: string | null
    user?: userUncheckedCreateNestedManyWithoutRoleInput
  }

  export type roleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateManyWithoutRoleInput
  }

  export type roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUncheckedUpdateManyWithoutRoleInput
  }

  export type roleCreateManyInput = {
    id?: number
    name: string
    privileges?: string | null
  }

  export type roleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
    role: roleCreateNestedOneWithoutUserInput
    appointments_appointments_dr_national_idTouser?: appointmentsCreateNestedManyWithoutUser_appointments_dr_national_idTouserInput
    appointments_appointments_patient_national_idTouser?: appointmentsCreateNestedManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUncheckedCreateInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    role_id: number
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
    appointments_appointments_dr_national_idTouser?: appointmentsUncheckedCreateNestedManyWithoutUser_appointments_dr_national_idTouserInput
    appointments_appointments_patient_national_idTouser?: appointmentsUncheckedCreateNestedManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: roleUpdateOneRequiredWithoutUserInput
    appointments_appointments_dr_national_idTouser?: appointmentsUpdateManyWithoutUser_appointments_dr_national_idTouserInput
    appointments_appointments_patient_national_idTouser?: appointmentsUpdateManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments_appointments_dr_national_idTouser?: appointmentsUncheckedUpdateManyWithoutUser_appointments_dr_national_idTouserInput
    appointments_appointments_patient_national_idTouser?: appointmentsUncheckedUpdateManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userCreateManyInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    role_id: number
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
  }

  export type userUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type RecordListRelationFilter = {
    every?: recordWhereInput
    some?: recordWhereInput
    none?: recordWhereInput
  }

  export type recordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type appointmentsIdDr_national_idPatient_national_idCompoundUniqueInput = {
    id: number
    dr_national_id: number
    patient_national_id: number
  }

  export type appointmentsCountOrderByAggregateInput = {
    id?: SortOrder
    appointment_date?: SortOrder
    appointment_from?: SortOrder
    appointment_to?: SortOrder
    dr_national_id?: SortOrder
    patient_national_id?: SortOrder
  }

  export type appointmentsAvgOrderByAggregateInput = {
    id?: SortOrder
    dr_national_id?: SortOrder
    patient_national_id?: SortOrder
  }

  export type appointmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    appointment_date?: SortOrder
    appointment_from?: SortOrder
    appointment_to?: SortOrder
    dr_national_id?: SortOrder
    patient_national_id?: SortOrder
  }

  export type appointmentsMinOrderByAggregateInput = {
    id?: SortOrder
    appointment_date?: SortOrder
    appointment_from?: SortOrder
    appointment_to?: SortOrder
    dr_national_id?: SortOrder
    patient_national_id?: SortOrder
  }

  export type appointmentsSumOrderByAggregateInput = {
    id?: SortOrder
    dr_national_id?: SortOrder
    patient_national_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type AppointmentsRelationFilter = {
    is?: appointmentsWhereInput
    isNot?: appointmentsWhereInput
  }

  export type Record_typeRelationFilter = {
    is?: record_typeWhereInput
    isNot?: record_typeWhereInput
  }

  export type Record_fileListRelationFilter = {
    every?: record_fileWhereInput
    some?: record_fileWhereInput
    none?: record_fileWhereInput
  }

  export type record_fileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type recordCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    appointments_id?: SortOrder
    record_type_id?: SortOrder
  }

  export type recordAvgOrderByAggregateInput = {
    id?: SortOrder
    appointments_id?: SortOrder
    record_type_id?: SortOrder
  }

  export type recordMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    appointments_id?: SortOrder
    record_type_id?: SortOrder
  }

  export type recordMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    appointments_id?: SortOrder
    record_type_id?: SortOrder
  }

  export type recordSumOrderByAggregateInput = {
    id?: SortOrder
    appointments_id?: SortOrder
    record_type_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type RecordRelationFilter = {
    is?: recordWhereInput
    isNot?: recordWhereInput
  }

  export type record_fileCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    record_id?: SortOrder
  }

  export type record_fileAvgOrderByAggregateInput = {
    id?: SortOrder
    record_id?: SortOrder
  }

  export type record_fileMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    record_id?: SortOrder
  }

  export type record_fileMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    record_id?: SortOrder
  }

  export type record_fileSumOrderByAggregateInput = {
    id?: SortOrder
    record_id?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type record_typeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type record_typeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type record_typeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type record_typeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type record_typeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type roleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    privileges?: SortOrder
  }

  export type roleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type roleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    privileges?: SortOrder
  }

  export type roleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    privileges?: SortOrder
  }

  export type roleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type RoleRelationFilter = {
    is?: roleWhereInput
    isNot?: roleWhereInput
  }

  export type AppointmentsListRelationFilter = {
    every?: appointmentsWhereInput
    some?: appointmentsWhereInput
    none?: appointmentsWhereInput
  }

  export type appointmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mname?: SortOrder
    lname?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    birthdate?: SortOrder
    role_id?: SortOrder
    password?: SortOrder
    passwordChangedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetTokenExpiry?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mname?: SortOrder
    lname?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    birthdate?: SortOrder
    role_id?: SortOrder
    password?: SortOrder
    passwordChangedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetTokenExpiry?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mname?: SortOrder
    lname?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    birthdate?: SortOrder
    role_id?: SortOrder
    password?: SortOrder
    passwordChangedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetTokenExpiry?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type userCreateNestedOneWithoutAppointments_appointments_dr_national_idTouserInput = {
    create?: XOR<userCreateWithoutAppointments_appointments_dr_national_idTouserInput, userUncheckedCreateWithoutAppointments_appointments_dr_national_idTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutAppointments_appointments_dr_national_idTouserInput
    connect?: userWhereUniqueInput
  }

  export type userCreateNestedOneWithoutAppointments_appointments_patient_national_idTouserInput = {
    create?: XOR<userCreateWithoutAppointments_appointments_patient_national_idTouserInput, userUncheckedCreateWithoutAppointments_appointments_patient_national_idTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutAppointments_appointments_patient_national_idTouserInput
    connect?: userWhereUniqueInput
  }

  export type recordCreateNestedManyWithoutAppointmentsInput = {
    create?: XOR<Enumerable<recordCreateWithoutAppointmentsInput>, Enumerable<recordUncheckedCreateWithoutAppointmentsInput>>
    connectOrCreate?: Enumerable<recordCreateOrConnectWithoutAppointmentsInput>
    createMany?: recordCreateManyAppointmentsInputEnvelope
    connect?: Enumerable<recordWhereUniqueInput>
  }

  export type recordUncheckedCreateNestedManyWithoutAppointmentsInput = {
    create?: XOR<Enumerable<recordCreateWithoutAppointmentsInput>, Enumerable<recordUncheckedCreateWithoutAppointmentsInput>>
    connectOrCreate?: Enumerable<recordCreateOrConnectWithoutAppointmentsInput>
    createMany?: recordCreateManyAppointmentsInputEnvelope
    connect?: Enumerable<recordWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type userUpdateOneRequiredWithoutAppointments_appointments_dr_national_idTouserInput = {
    create?: XOR<userCreateWithoutAppointments_appointments_dr_national_idTouserInput, userUncheckedCreateWithoutAppointments_appointments_dr_national_idTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutAppointments_appointments_dr_national_idTouserInput
    upsert?: userUpsertWithoutAppointments_appointments_dr_national_idTouserInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutAppointments_appointments_dr_national_idTouserInput, userUncheckedUpdateWithoutAppointments_appointments_dr_national_idTouserInput>
  }

  export type userUpdateOneRequiredWithoutAppointments_appointments_patient_national_idTouserInput = {
    create?: XOR<userCreateWithoutAppointments_appointments_patient_national_idTouserInput, userUncheckedCreateWithoutAppointments_appointments_patient_national_idTouserInput>
    connectOrCreate?: userCreateOrConnectWithoutAppointments_appointments_patient_national_idTouserInput
    upsert?: userUpsertWithoutAppointments_appointments_patient_national_idTouserInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutAppointments_appointments_patient_national_idTouserInput, userUncheckedUpdateWithoutAppointments_appointments_patient_national_idTouserInput>
  }

  export type recordUpdateManyWithoutAppointmentsInput = {
    create?: XOR<Enumerable<recordCreateWithoutAppointmentsInput>, Enumerable<recordUncheckedCreateWithoutAppointmentsInput>>
    connectOrCreate?: Enumerable<recordCreateOrConnectWithoutAppointmentsInput>
    upsert?: Enumerable<recordUpsertWithWhereUniqueWithoutAppointmentsInput>
    createMany?: recordCreateManyAppointmentsInputEnvelope
    set?: Enumerable<recordWhereUniqueInput>
    disconnect?: Enumerable<recordWhereUniqueInput>
    delete?: Enumerable<recordWhereUniqueInput>
    connect?: Enumerable<recordWhereUniqueInput>
    update?: Enumerable<recordUpdateWithWhereUniqueWithoutAppointmentsInput>
    updateMany?: Enumerable<recordUpdateManyWithWhereWithoutAppointmentsInput>
    deleteMany?: Enumerable<recordScalarWhereInput>
  }

  export type recordUncheckedUpdateManyWithoutAppointmentsInput = {
    create?: XOR<Enumerable<recordCreateWithoutAppointmentsInput>, Enumerable<recordUncheckedCreateWithoutAppointmentsInput>>
    connectOrCreate?: Enumerable<recordCreateOrConnectWithoutAppointmentsInput>
    upsert?: Enumerable<recordUpsertWithWhereUniqueWithoutAppointmentsInput>
    createMany?: recordCreateManyAppointmentsInputEnvelope
    set?: Enumerable<recordWhereUniqueInput>
    disconnect?: Enumerable<recordWhereUniqueInput>
    delete?: Enumerable<recordWhereUniqueInput>
    connect?: Enumerable<recordWhereUniqueInput>
    update?: Enumerable<recordUpdateWithWhereUniqueWithoutAppointmentsInput>
    updateMany?: Enumerable<recordUpdateManyWithWhereWithoutAppointmentsInput>
    deleteMany?: Enumerable<recordScalarWhereInput>
  }

  export type appointmentsCreateNestedOneWithoutRecordInput = {
    create?: XOR<appointmentsCreateWithoutRecordInput, appointmentsUncheckedCreateWithoutRecordInput>
    connectOrCreate?: appointmentsCreateOrConnectWithoutRecordInput
    connect?: appointmentsWhereUniqueInput
  }

  export type record_typeCreateNestedOneWithoutRecordInput = {
    create?: XOR<record_typeCreateWithoutRecordInput, record_typeUncheckedCreateWithoutRecordInput>
    connectOrCreate?: record_typeCreateOrConnectWithoutRecordInput
    connect?: record_typeWhereUniqueInput
  }

  export type record_fileCreateNestedManyWithoutRecordInput = {
    create?: XOR<Enumerable<record_fileCreateWithoutRecordInput>, Enumerable<record_fileUncheckedCreateWithoutRecordInput>>
    connectOrCreate?: Enumerable<record_fileCreateOrConnectWithoutRecordInput>
    createMany?: record_fileCreateManyRecordInputEnvelope
    connect?: Enumerable<record_fileWhereUniqueInput>
  }

  export type record_fileUncheckedCreateNestedManyWithoutRecordInput = {
    create?: XOR<Enumerable<record_fileCreateWithoutRecordInput>, Enumerable<record_fileUncheckedCreateWithoutRecordInput>>
    connectOrCreate?: Enumerable<record_fileCreateOrConnectWithoutRecordInput>
    createMany?: record_fileCreateManyRecordInputEnvelope
    connect?: Enumerable<record_fileWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type appointmentsUpdateOneRequiredWithoutRecordInput = {
    create?: XOR<appointmentsCreateWithoutRecordInput, appointmentsUncheckedCreateWithoutRecordInput>
    connectOrCreate?: appointmentsCreateOrConnectWithoutRecordInput
    upsert?: appointmentsUpsertWithoutRecordInput
    connect?: appointmentsWhereUniqueInput
    update?: XOR<appointmentsUpdateWithoutRecordInput, appointmentsUncheckedUpdateWithoutRecordInput>
  }

  export type record_typeUpdateOneRequiredWithoutRecordInput = {
    create?: XOR<record_typeCreateWithoutRecordInput, record_typeUncheckedCreateWithoutRecordInput>
    connectOrCreate?: record_typeCreateOrConnectWithoutRecordInput
    upsert?: record_typeUpsertWithoutRecordInput
    connect?: record_typeWhereUniqueInput
    update?: XOR<record_typeUpdateWithoutRecordInput, record_typeUncheckedUpdateWithoutRecordInput>
  }

  export type record_fileUpdateManyWithoutRecordInput = {
    create?: XOR<Enumerable<record_fileCreateWithoutRecordInput>, Enumerable<record_fileUncheckedCreateWithoutRecordInput>>
    connectOrCreate?: Enumerable<record_fileCreateOrConnectWithoutRecordInput>
    upsert?: Enumerable<record_fileUpsertWithWhereUniqueWithoutRecordInput>
    createMany?: record_fileCreateManyRecordInputEnvelope
    set?: Enumerable<record_fileWhereUniqueInput>
    disconnect?: Enumerable<record_fileWhereUniqueInput>
    delete?: Enumerable<record_fileWhereUniqueInput>
    connect?: Enumerable<record_fileWhereUniqueInput>
    update?: Enumerable<record_fileUpdateWithWhereUniqueWithoutRecordInput>
    updateMany?: Enumerable<record_fileUpdateManyWithWhereWithoutRecordInput>
    deleteMany?: Enumerable<record_fileScalarWhereInput>
  }

  export type record_fileUncheckedUpdateManyWithoutRecordInput = {
    create?: XOR<Enumerable<record_fileCreateWithoutRecordInput>, Enumerable<record_fileUncheckedCreateWithoutRecordInput>>
    connectOrCreate?: Enumerable<record_fileCreateOrConnectWithoutRecordInput>
    upsert?: Enumerable<record_fileUpsertWithWhereUniqueWithoutRecordInput>
    createMany?: record_fileCreateManyRecordInputEnvelope
    set?: Enumerable<record_fileWhereUniqueInput>
    disconnect?: Enumerable<record_fileWhereUniqueInput>
    delete?: Enumerable<record_fileWhereUniqueInput>
    connect?: Enumerable<record_fileWhereUniqueInput>
    update?: Enumerable<record_fileUpdateWithWhereUniqueWithoutRecordInput>
    updateMany?: Enumerable<record_fileUpdateManyWithWhereWithoutRecordInput>
    deleteMany?: Enumerable<record_fileScalarWhereInput>
  }

  export type recordCreateNestedOneWithoutRecord_fileInput = {
    create?: XOR<recordCreateWithoutRecord_fileInput, recordUncheckedCreateWithoutRecord_fileInput>
    connectOrCreate?: recordCreateOrConnectWithoutRecord_fileInput
    connect?: recordWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type recordUpdateOneRequiredWithoutRecord_fileInput = {
    create?: XOR<recordCreateWithoutRecord_fileInput, recordUncheckedCreateWithoutRecord_fileInput>
    connectOrCreate?: recordCreateOrConnectWithoutRecord_fileInput
    upsert?: recordUpsertWithoutRecord_fileInput
    connect?: recordWhereUniqueInput
    update?: XOR<recordUpdateWithoutRecord_fileInput, recordUncheckedUpdateWithoutRecord_fileInput>
  }

  export type recordCreateNestedManyWithoutRecord_typeInput = {
    create?: XOR<Enumerable<recordCreateWithoutRecord_typeInput>, Enumerable<recordUncheckedCreateWithoutRecord_typeInput>>
    connectOrCreate?: Enumerable<recordCreateOrConnectWithoutRecord_typeInput>
    createMany?: recordCreateManyRecord_typeInputEnvelope
    connect?: Enumerable<recordWhereUniqueInput>
  }

  export type recordUncheckedCreateNestedManyWithoutRecord_typeInput = {
    create?: XOR<Enumerable<recordCreateWithoutRecord_typeInput>, Enumerable<recordUncheckedCreateWithoutRecord_typeInput>>
    connectOrCreate?: Enumerable<recordCreateOrConnectWithoutRecord_typeInput>
    createMany?: recordCreateManyRecord_typeInputEnvelope
    connect?: Enumerable<recordWhereUniqueInput>
  }

  export type recordUpdateManyWithoutRecord_typeInput = {
    create?: XOR<Enumerable<recordCreateWithoutRecord_typeInput>, Enumerable<recordUncheckedCreateWithoutRecord_typeInput>>
    connectOrCreate?: Enumerable<recordCreateOrConnectWithoutRecord_typeInput>
    upsert?: Enumerable<recordUpsertWithWhereUniqueWithoutRecord_typeInput>
    createMany?: recordCreateManyRecord_typeInputEnvelope
    set?: Enumerable<recordWhereUniqueInput>
    disconnect?: Enumerable<recordWhereUniqueInput>
    delete?: Enumerable<recordWhereUniqueInput>
    connect?: Enumerable<recordWhereUniqueInput>
    update?: Enumerable<recordUpdateWithWhereUniqueWithoutRecord_typeInput>
    updateMany?: Enumerable<recordUpdateManyWithWhereWithoutRecord_typeInput>
    deleteMany?: Enumerable<recordScalarWhereInput>
  }

  export type recordUncheckedUpdateManyWithoutRecord_typeInput = {
    create?: XOR<Enumerable<recordCreateWithoutRecord_typeInput>, Enumerable<recordUncheckedCreateWithoutRecord_typeInput>>
    connectOrCreate?: Enumerable<recordCreateOrConnectWithoutRecord_typeInput>
    upsert?: Enumerable<recordUpsertWithWhereUniqueWithoutRecord_typeInput>
    createMany?: recordCreateManyRecord_typeInputEnvelope
    set?: Enumerable<recordWhereUniqueInput>
    disconnect?: Enumerable<recordWhereUniqueInput>
    delete?: Enumerable<recordWhereUniqueInput>
    connect?: Enumerable<recordWhereUniqueInput>
    update?: Enumerable<recordUpdateWithWhereUniqueWithoutRecord_typeInput>
    updateMany?: Enumerable<recordUpdateManyWithWhereWithoutRecord_typeInput>
    deleteMany?: Enumerable<recordScalarWhereInput>
  }

  export type userCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<userCreateWithoutRoleInput>, Enumerable<userUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutRoleInput>
    createMany?: userCreateManyRoleInputEnvelope
    connect?: Enumerable<userWhereUniqueInput>
  }

  export type userUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<userCreateWithoutRoleInput>, Enumerable<userUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutRoleInput>
    createMany?: userCreateManyRoleInputEnvelope
    connect?: Enumerable<userWhereUniqueInput>
  }

  export type userUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<userCreateWithoutRoleInput>, Enumerable<userUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<userUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: userCreateManyRoleInputEnvelope
    set?: Enumerable<userWhereUniqueInput>
    disconnect?: Enumerable<userWhereUniqueInput>
    delete?: Enumerable<userWhereUniqueInput>
    connect?: Enumerable<userWhereUniqueInput>
    update?: Enumerable<userUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<userUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<userScalarWhereInput>
  }

  export type userUncheckedUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<userCreateWithoutRoleInput>, Enumerable<userUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<userUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: userCreateManyRoleInputEnvelope
    set?: Enumerable<userWhereUniqueInput>
    disconnect?: Enumerable<userWhereUniqueInput>
    delete?: Enumerable<userWhereUniqueInput>
    connect?: Enumerable<userWhereUniqueInput>
    update?: Enumerable<userUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<userUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<userScalarWhereInput>
  }

  export type roleCreateNestedOneWithoutUserInput = {
    create?: XOR<roleCreateWithoutUserInput, roleUncheckedCreateWithoutUserInput>
    connectOrCreate?: roleCreateOrConnectWithoutUserInput
    connect?: roleWhereUniqueInput
  }

  export type appointmentsCreateNestedManyWithoutUser_appointments_dr_national_idTouserInput = {
    create?: XOR<Enumerable<appointmentsCreateWithoutUser_appointments_dr_national_idTouserInput>, Enumerable<appointmentsUncheckedCreateWithoutUser_appointments_dr_national_idTouserInput>>
    connectOrCreate?: Enumerable<appointmentsCreateOrConnectWithoutUser_appointments_dr_national_idTouserInput>
    createMany?: appointmentsCreateManyUser_appointments_dr_national_idTouserInputEnvelope
    connect?: Enumerable<appointmentsWhereUniqueInput>
  }

  export type appointmentsCreateNestedManyWithoutUser_appointments_patient_national_idTouserInput = {
    create?: XOR<Enumerable<appointmentsCreateWithoutUser_appointments_patient_national_idTouserInput>, Enumerable<appointmentsUncheckedCreateWithoutUser_appointments_patient_national_idTouserInput>>
    connectOrCreate?: Enumerable<appointmentsCreateOrConnectWithoutUser_appointments_patient_national_idTouserInput>
    createMany?: appointmentsCreateManyUser_appointments_patient_national_idTouserInputEnvelope
    connect?: Enumerable<appointmentsWhereUniqueInput>
  }

  export type appointmentsUncheckedCreateNestedManyWithoutUser_appointments_dr_national_idTouserInput = {
    create?: XOR<Enumerable<appointmentsCreateWithoutUser_appointments_dr_national_idTouserInput>, Enumerable<appointmentsUncheckedCreateWithoutUser_appointments_dr_national_idTouserInput>>
    connectOrCreate?: Enumerable<appointmentsCreateOrConnectWithoutUser_appointments_dr_national_idTouserInput>
    createMany?: appointmentsCreateManyUser_appointments_dr_national_idTouserInputEnvelope
    connect?: Enumerable<appointmentsWhereUniqueInput>
  }

  export type appointmentsUncheckedCreateNestedManyWithoutUser_appointments_patient_national_idTouserInput = {
    create?: XOR<Enumerable<appointmentsCreateWithoutUser_appointments_patient_national_idTouserInput>, Enumerable<appointmentsUncheckedCreateWithoutUser_appointments_patient_national_idTouserInput>>
    connectOrCreate?: Enumerable<appointmentsCreateOrConnectWithoutUser_appointments_patient_national_idTouserInput>
    createMany?: appointmentsCreateManyUser_appointments_patient_national_idTouserInputEnvelope
    connect?: Enumerable<appointmentsWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type roleUpdateOneRequiredWithoutUserInput = {
    create?: XOR<roleCreateWithoutUserInput, roleUncheckedCreateWithoutUserInput>
    connectOrCreate?: roleCreateOrConnectWithoutUserInput
    upsert?: roleUpsertWithoutUserInput
    connect?: roleWhereUniqueInput
    update?: XOR<roleUpdateWithoutUserInput, roleUncheckedUpdateWithoutUserInput>
  }

  export type appointmentsUpdateManyWithoutUser_appointments_dr_national_idTouserInput = {
    create?: XOR<Enumerable<appointmentsCreateWithoutUser_appointments_dr_national_idTouserInput>, Enumerable<appointmentsUncheckedCreateWithoutUser_appointments_dr_national_idTouserInput>>
    connectOrCreate?: Enumerable<appointmentsCreateOrConnectWithoutUser_appointments_dr_national_idTouserInput>
    upsert?: Enumerable<appointmentsUpsertWithWhereUniqueWithoutUser_appointments_dr_national_idTouserInput>
    createMany?: appointmentsCreateManyUser_appointments_dr_national_idTouserInputEnvelope
    set?: Enumerable<appointmentsWhereUniqueInput>
    disconnect?: Enumerable<appointmentsWhereUniqueInput>
    delete?: Enumerable<appointmentsWhereUniqueInput>
    connect?: Enumerable<appointmentsWhereUniqueInput>
    update?: Enumerable<appointmentsUpdateWithWhereUniqueWithoutUser_appointments_dr_national_idTouserInput>
    updateMany?: Enumerable<appointmentsUpdateManyWithWhereWithoutUser_appointments_dr_national_idTouserInput>
    deleteMany?: Enumerable<appointmentsScalarWhereInput>
  }

  export type appointmentsUpdateManyWithoutUser_appointments_patient_national_idTouserInput = {
    create?: XOR<Enumerable<appointmentsCreateWithoutUser_appointments_patient_national_idTouserInput>, Enumerable<appointmentsUncheckedCreateWithoutUser_appointments_patient_national_idTouserInput>>
    connectOrCreate?: Enumerable<appointmentsCreateOrConnectWithoutUser_appointments_patient_national_idTouserInput>
    upsert?: Enumerable<appointmentsUpsertWithWhereUniqueWithoutUser_appointments_patient_national_idTouserInput>
    createMany?: appointmentsCreateManyUser_appointments_patient_national_idTouserInputEnvelope
    set?: Enumerable<appointmentsWhereUniqueInput>
    disconnect?: Enumerable<appointmentsWhereUniqueInput>
    delete?: Enumerable<appointmentsWhereUniqueInput>
    connect?: Enumerable<appointmentsWhereUniqueInput>
    update?: Enumerable<appointmentsUpdateWithWhereUniqueWithoutUser_appointments_patient_national_idTouserInput>
    updateMany?: Enumerable<appointmentsUpdateManyWithWhereWithoutUser_appointments_patient_national_idTouserInput>
    deleteMany?: Enumerable<appointmentsScalarWhereInput>
  }

  export type appointmentsUncheckedUpdateManyWithoutUser_appointments_dr_national_idTouserInput = {
    create?: XOR<Enumerable<appointmentsCreateWithoutUser_appointments_dr_national_idTouserInput>, Enumerable<appointmentsUncheckedCreateWithoutUser_appointments_dr_national_idTouserInput>>
    connectOrCreate?: Enumerable<appointmentsCreateOrConnectWithoutUser_appointments_dr_national_idTouserInput>
    upsert?: Enumerable<appointmentsUpsertWithWhereUniqueWithoutUser_appointments_dr_national_idTouserInput>
    createMany?: appointmentsCreateManyUser_appointments_dr_national_idTouserInputEnvelope
    set?: Enumerable<appointmentsWhereUniqueInput>
    disconnect?: Enumerable<appointmentsWhereUniqueInput>
    delete?: Enumerable<appointmentsWhereUniqueInput>
    connect?: Enumerable<appointmentsWhereUniqueInput>
    update?: Enumerable<appointmentsUpdateWithWhereUniqueWithoutUser_appointments_dr_national_idTouserInput>
    updateMany?: Enumerable<appointmentsUpdateManyWithWhereWithoutUser_appointments_dr_national_idTouserInput>
    deleteMany?: Enumerable<appointmentsScalarWhereInput>
  }

  export type appointmentsUncheckedUpdateManyWithoutUser_appointments_patient_national_idTouserInput = {
    create?: XOR<Enumerable<appointmentsCreateWithoutUser_appointments_patient_national_idTouserInput>, Enumerable<appointmentsUncheckedCreateWithoutUser_appointments_patient_national_idTouserInput>>
    connectOrCreate?: Enumerable<appointmentsCreateOrConnectWithoutUser_appointments_patient_national_idTouserInput>
    upsert?: Enumerable<appointmentsUpsertWithWhereUniqueWithoutUser_appointments_patient_national_idTouserInput>
    createMany?: appointmentsCreateManyUser_appointments_patient_national_idTouserInputEnvelope
    set?: Enumerable<appointmentsWhereUniqueInput>
    disconnect?: Enumerable<appointmentsWhereUniqueInput>
    delete?: Enumerable<appointmentsWhereUniqueInput>
    connect?: Enumerable<appointmentsWhereUniqueInput>
    update?: Enumerable<appointmentsUpdateWithWhereUniqueWithoutUser_appointments_patient_national_idTouserInput>
    updateMany?: Enumerable<appointmentsUpdateManyWithWhereWithoutUser_appointments_patient_national_idTouserInput>
    deleteMany?: Enumerable<appointmentsScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type userCreateWithoutAppointments_appointments_dr_national_idTouserInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
    role: roleCreateNestedOneWithoutUserInput
    appointments_appointments_patient_national_idTouser?: appointmentsCreateNestedManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUncheckedCreateWithoutAppointments_appointments_dr_national_idTouserInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    role_id: number
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
    appointments_appointments_patient_national_idTouser?: appointmentsUncheckedCreateNestedManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userCreateOrConnectWithoutAppointments_appointments_dr_national_idTouserInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAppointments_appointments_dr_national_idTouserInput, userUncheckedCreateWithoutAppointments_appointments_dr_national_idTouserInput>
  }

  export type userCreateWithoutAppointments_appointments_patient_national_idTouserInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
    role: roleCreateNestedOneWithoutUserInput
    appointments_appointments_dr_national_idTouser?: appointmentsCreateNestedManyWithoutUser_appointments_dr_national_idTouserInput
  }

  export type userUncheckedCreateWithoutAppointments_appointments_patient_national_idTouserInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    role_id: number
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
    appointments_appointments_dr_national_idTouser?: appointmentsUncheckedCreateNestedManyWithoutUser_appointments_dr_national_idTouserInput
  }

  export type userCreateOrConnectWithoutAppointments_appointments_patient_national_idTouserInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAppointments_appointments_patient_national_idTouserInput, userUncheckedCreateWithoutAppointments_appointments_patient_national_idTouserInput>
  }

  export type recordCreateWithoutAppointmentsInput = {
    date: Date | string
    description?: string | null
    record_type: record_typeCreateNestedOneWithoutRecordInput
    record_file?: record_fileCreateNestedManyWithoutRecordInput
  }

  export type recordUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    date: Date | string
    description?: string | null
    record_type_id: number
    record_file?: record_fileUncheckedCreateNestedManyWithoutRecordInput
  }

  export type recordCreateOrConnectWithoutAppointmentsInput = {
    where: recordWhereUniqueInput
    create: XOR<recordCreateWithoutAppointmentsInput, recordUncheckedCreateWithoutAppointmentsInput>
  }

  export type recordCreateManyAppointmentsInputEnvelope = {
    data: Enumerable<recordCreateManyAppointmentsInput>
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutAppointments_appointments_dr_national_idTouserInput = {
    update: XOR<userUpdateWithoutAppointments_appointments_dr_national_idTouserInput, userUncheckedUpdateWithoutAppointments_appointments_dr_national_idTouserInput>
    create: XOR<userCreateWithoutAppointments_appointments_dr_national_idTouserInput, userUncheckedCreateWithoutAppointments_appointments_dr_national_idTouserInput>
  }

  export type userUpdateWithoutAppointments_appointments_dr_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: roleUpdateOneRequiredWithoutUserInput
    appointments_appointments_patient_national_idTouser?: appointmentsUpdateManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUncheckedUpdateWithoutAppointments_appointments_dr_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments_appointments_patient_national_idTouser?: appointmentsUncheckedUpdateManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUpsertWithoutAppointments_appointments_patient_national_idTouserInput = {
    update: XOR<userUpdateWithoutAppointments_appointments_patient_national_idTouserInput, userUncheckedUpdateWithoutAppointments_appointments_patient_national_idTouserInput>
    create: XOR<userCreateWithoutAppointments_appointments_patient_national_idTouserInput, userUncheckedCreateWithoutAppointments_appointments_patient_national_idTouserInput>
  }

  export type userUpdateWithoutAppointments_appointments_patient_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: roleUpdateOneRequiredWithoutUserInput
    appointments_appointments_dr_national_idTouser?: appointmentsUpdateManyWithoutUser_appointments_dr_national_idTouserInput
  }

  export type userUncheckedUpdateWithoutAppointments_appointments_patient_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments_appointments_dr_national_idTouser?: appointmentsUncheckedUpdateManyWithoutUser_appointments_dr_national_idTouserInput
  }

  export type recordUpsertWithWhereUniqueWithoutAppointmentsInput = {
    where: recordWhereUniqueInput
    update: XOR<recordUpdateWithoutAppointmentsInput, recordUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<recordCreateWithoutAppointmentsInput, recordUncheckedCreateWithoutAppointmentsInput>
  }

  export type recordUpdateWithWhereUniqueWithoutAppointmentsInput = {
    where: recordWhereUniqueInput
    data: XOR<recordUpdateWithoutAppointmentsInput, recordUncheckedUpdateWithoutAppointmentsInput>
  }

  export type recordUpdateManyWithWhereWithoutAppointmentsInput = {
    where: recordScalarWhereInput
    data: XOR<recordUpdateManyMutationInput, recordUncheckedUpdateManyWithoutRecordInput>
  }

  export type recordScalarWhereInput = {
    AND?: Enumerable<recordScalarWhereInput>
    OR?: Enumerable<recordScalarWhereInput>
    NOT?: Enumerable<recordScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    description?: StringNullableFilter | string | null
    appointments_id?: IntFilter | number
    record_type_id?: IntFilter | number
  }

  export type appointmentsCreateWithoutRecordInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    user_appointments_dr_national_idTouser: userCreateNestedOneWithoutAppointments_appointments_dr_national_idTouserInput
    user_appointments_patient_national_idTouser: userCreateNestedOneWithoutAppointments_appointments_patient_national_idTouserInput
  }

  export type appointmentsUncheckedCreateWithoutRecordInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    dr_national_id: number
    patient_national_id: number
  }

  export type appointmentsCreateOrConnectWithoutRecordInput = {
    where: appointmentsWhereUniqueInput
    create: XOR<appointmentsCreateWithoutRecordInput, appointmentsUncheckedCreateWithoutRecordInput>
  }

  export type record_typeCreateWithoutRecordInput = {
    id: number
    name: string
    description?: string | null
  }

  export type record_typeUncheckedCreateWithoutRecordInput = {
    id: number
    name: string
    description?: string | null
  }

  export type record_typeCreateOrConnectWithoutRecordInput = {
    where: record_typeWhereUniqueInput
    create: XOR<record_typeCreateWithoutRecordInput, record_typeUncheckedCreateWithoutRecordInput>
  }

  export type record_fileCreateWithoutRecordInput = {
    path: string
  }

  export type record_fileUncheckedCreateWithoutRecordInput = {
    id?: number
    path: string
  }

  export type record_fileCreateOrConnectWithoutRecordInput = {
    where: record_fileWhereUniqueInput
    create: XOR<record_fileCreateWithoutRecordInput, record_fileUncheckedCreateWithoutRecordInput>
  }

  export type record_fileCreateManyRecordInputEnvelope = {
    data: Enumerable<record_fileCreateManyRecordInput>
    skipDuplicates?: boolean
  }

  export type appointmentsUpsertWithoutRecordInput = {
    update: XOR<appointmentsUpdateWithoutRecordInput, appointmentsUncheckedUpdateWithoutRecordInput>
    create: XOR<appointmentsCreateWithoutRecordInput, appointmentsUncheckedCreateWithoutRecordInput>
  }

  export type appointmentsUpdateWithoutRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    user_appointments_dr_national_idTouser?: userUpdateOneRequiredWithoutAppointments_appointments_dr_national_idTouserInput
    user_appointments_patient_national_idTouser?: userUpdateOneRequiredWithoutAppointments_appointments_patient_national_idTouserInput
  }

  export type appointmentsUncheckedUpdateWithoutRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    dr_national_id?: IntFieldUpdateOperationsInput | number
    patient_national_id?: IntFieldUpdateOperationsInput | number
  }

  export type record_typeUpsertWithoutRecordInput = {
    update: XOR<record_typeUpdateWithoutRecordInput, record_typeUncheckedUpdateWithoutRecordInput>
    create: XOR<record_typeCreateWithoutRecordInput, record_typeUncheckedCreateWithoutRecordInput>
  }

  export type record_typeUpdateWithoutRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type record_typeUncheckedUpdateWithoutRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type record_fileUpsertWithWhereUniqueWithoutRecordInput = {
    where: record_fileWhereUniqueInput
    update: XOR<record_fileUpdateWithoutRecordInput, record_fileUncheckedUpdateWithoutRecordInput>
    create: XOR<record_fileCreateWithoutRecordInput, record_fileUncheckedCreateWithoutRecordInput>
  }

  export type record_fileUpdateWithWhereUniqueWithoutRecordInput = {
    where: record_fileWhereUniqueInput
    data: XOR<record_fileUpdateWithoutRecordInput, record_fileUncheckedUpdateWithoutRecordInput>
  }

  export type record_fileUpdateManyWithWhereWithoutRecordInput = {
    where: record_fileScalarWhereInput
    data: XOR<record_fileUpdateManyMutationInput, record_fileUncheckedUpdateManyWithoutRecord_fileInput>
  }

  export type record_fileScalarWhereInput = {
    AND?: Enumerable<record_fileScalarWhereInput>
    OR?: Enumerable<record_fileScalarWhereInput>
    NOT?: Enumerable<record_fileScalarWhereInput>
    id?: IntFilter | number
    path?: StringFilter | string
    record_id?: IntFilter | number
  }

  export type recordCreateWithoutRecord_fileInput = {
    date: Date | string
    description?: string | null
    appointments: appointmentsCreateNestedOneWithoutRecordInput
    record_type: record_typeCreateNestedOneWithoutRecordInput
  }

  export type recordUncheckedCreateWithoutRecord_fileInput = {
    id?: number
    date: Date | string
    description?: string | null
    appointments_id: number
    record_type_id: number
  }

  export type recordCreateOrConnectWithoutRecord_fileInput = {
    where: recordWhereUniqueInput
    create: XOR<recordCreateWithoutRecord_fileInput, recordUncheckedCreateWithoutRecord_fileInput>
  }

  export type recordUpsertWithoutRecord_fileInput = {
    update: XOR<recordUpdateWithoutRecord_fileInput, recordUncheckedUpdateWithoutRecord_fileInput>
    create: XOR<recordCreateWithoutRecord_fileInput, recordUncheckedCreateWithoutRecord_fileInput>
  }

  export type recordUpdateWithoutRecord_fileInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    appointments?: appointmentsUpdateOneRequiredWithoutRecordInput
    record_type?: record_typeUpdateOneRequiredWithoutRecordInput
  }

  export type recordUncheckedUpdateWithoutRecord_fileInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    appointments_id?: IntFieldUpdateOperationsInput | number
    record_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type recordCreateWithoutRecord_typeInput = {
    date: Date | string
    description?: string | null
    appointments: appointmentsCreateNestedOneWithoutRecordInput
    record_file?: record_fileCreateNestedManyWithoutRecordInput
  }

  export type recordUncheckedCreateWithoutRecord_typeInput = {
    id?: number
    date: Date | string
    description?: string | null
    appointments_id: number
    record_file?: record_fileUncheckedCreateNestedManyWithoutRecordInput
  }

  export type recordCreateOrConnectWithoutRecord_typeInput = {
    where: recordWhereUniqueInput
    create: XOR<recordCreateWithoutRecord_typeInput, recordUncheckedCreateWithoutRecord_typeInput>
  }

  export type recordCreateManyRecord_typeInputEnvelope = {
    data: Enumerable<recordCreateManyRecord_typeInput>
    skipDuplicates?: boolean
  }

  export type recordUpsertWithWhereUniqueWithoutRecord_typeInput = {
    where: recordWhereUniqueInput
    update: XOR<recordUpdateWithoutRecord_typeInput, recordUncheckedUpdateWithoutRecord_typeInput>
    create: XOR<recordCreateWithoutRecord_typeInput, recordUncheckedCreateWithoutRecord_typeInput>
  }

  export type recordUpdateWithWhereUniqueWithoutRecord_typeInput = {
    where: recordWhereUniqueInput
    data: XOR<recordUpdateWithoutRecord_typeInput, recordUncheckedUpdateWithoutRecord_typeInput>
  }

  export type recordUpdateManyWithWhereWithoutRecord_typeInput = {
    where: recordScalarWhereInput
    data: XOR<recordUpdateManyMutationInput, recordUncheckedUpdateManyWithoutRecordInput>
  }

  export type userCreateWithoutRoleInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
    appointments_appointments_dr_national_idTouser?: appointmentsCreateNestedManyWithoutUser_appointments_dr_national_idTouserInput
    appointments_appointments_patient_national_idTouser?: appointmentsCreateNestedManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUncheckedCreateWithoutRoleInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
    appointments_appointments_dr_national_idTouser?: appointmentsUncheckedCreateNestedManyWithoutUser_appointments_dr_national_idTouserInput
    appointments_appointments_patient_national_idTouser?: appointmentsUncheckedCreateNestedManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userCreateOrConnectWithoutRoleInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutRoleInput, userUncheckedCreateWithoutRoleInput>
  }

  export type userCreateManyRoleInputEnvelope = {
    data: Enumerable<userCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type userUpsertWithWhereUniqueWithoutRoleInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutRoleInput, userUncheckedUpdateWithoutRoleInput>
    create: XOR<userCreateWithoutRoleInput, userUncheckedCreateWithoutRoleInput>
  }

  export type userUpdateWithWhereUniqueWithoutRoleInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutRoleInput, userUncheckedUpdateWithoutRoleInput>
  }

  export type userUpdateManyWithWhereWithoutRoleInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutUserInput>
  }

  export type userScalarWhereInput = {
    AND?: Enumerable<userScalarWhereInput>
    OR?: Enumerable<userScalarWhereInput>
    NOT?: Enumerable<userScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    mname?: StringFilter | string
    lname?: StringFilter | string
    phone?: StringFilter | string
    email?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    birthdate?: DateTimeNullableFilter | Date | string | null
    role_id?: IntFilter | number
    password?: StringFilter | string
    passwordChangedAt?: DateTimeNullableFilter | Date | string | null
    passwordResetToken?: StringNullableFilter | string | null
    passwordResetTokenExpiry?: DateTimeNullableFilter | Date | string | null
  }

  export type roleCreateWithoutUserInput = {
    name: string
    privileges?: string | null
  }

  export type roleUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    privileges?: string | null
  }

  export type roleCreateOrConnectWithoutUserInput = {
    where: roleWhereUniqueInput
    create: XOR<roleCreateWithoutUserInput, roleUncheckedCreateWithoutUserInput>
  }

  export type appointmentsCreateWithoutUser_appointments_dr_national_idTouserInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    user_appointments_patient_national_idTouser: userCreateNestedOneWithoutAppointments_appointments_patient_national_idTouserInput
    record?: recordCreateNestedManyWithoutAppointmentsInput
  }

  export type appointmentsUncheckedCreateWithoutUser_appointments_dr_national_idTouserInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    patient_national_id: number
    record?: recordUncheckedCreateNestedManyWithoutAppointmentsInput
  }

  export type appointmentsCreateOrConnectWithoutUser_appointments_dr_national_idTouserInput = {
    where: appointmentsWhereUniqueInput
    create: XOR<appointmentsCreateWithoutUser_appointments_dr_national_idTouserInput, appointmentsUncheckedCreateWithoutUser_appointments_dr_national_idTouserInput>
  }

  export type appointmentsCreateManyUser_appointments_dr_national_idTouserInputEnvelope = {
    data: Enumerable<appointmentsCreateManyUser_appointments_dr_national_idTouserInput>
    skipDuplicates?: boolean
  }

  export type appointmentsCreateWithoutUser_appointments_patient_national_idTouserInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    user_appointments_dr_national_idTouser: userCreateNestedOneWithoutAppointments_appointments_dr_national_idTouserInput
    record?: recordCreateNestedManyWithoutAppointmentsInput
  }

  export type appointmentsUncheckedCreateWithoutUser_appointments_patient_national_idTouserInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    dr_national_id: number
    record?: recordUncheckedCreateNestedManyWithoutAppointmentsInput
  }

  export type appointmentsCreateOrConnectWithoutUser_appointments_patient_national_idTouserInput = {
    where: appointmentsWhereUniqueInput
    create: XOR<appointmentsCreateWithoutUser_appointments_patient_national_idTouserInput, appointmentsUncheckedCreateWithoutUser_appointments_patient_national_idTouserInput>
  }

  export type appointmentsCreateManyUser_appointments_patient_national_idTouserInputEnvelope = {
    data: Enumerable<appointmentsCreateManyUser_appointments_patient_national_idTouserInput>
    skipDuplicates?: boolean
  }

  export type roleUpsertWithoutUserInput = {
    update: XOR<roleUpdateWithoutUserInput, roleUncheckedUpdateWithoutUserInput>
    create: XOR<roleCreateWithoutUserInput, roleUncheckedCreateWithoutUserInput>
  }

  export type roleUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type roleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    privileges?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type appointmentsUpsertWithWhereUniqueWithoutUser_appointments_dr_national_idTouserInput = {
    where: appointmentsWhereUniqueInput
    update: XOR<appointmentsUpdateWithoutUser_appointments_dr_national_idTouserInput, appointmentsUncheckedUpdateWithoutUser_appointments_dr_national_idTouserInput>
    create: XOR<appointmentsCreateWithoutUser_appointments_dr_national_idTouserInput, appointmentsUncheckedCreateWithoutUser_appointments_dr_national_idTouserInput>
  }

  export type appointmentsUpdateWithWhereUniqueWithoutUser_appointments_dr_national_idTouserInput = {
    where: appointmentsWhereUniqueInput
    data: XOR<appointmentsUpdateWithoutUser_appointments_dr_national_idTouserInput, appointmentsUncheckedUpdateWithoutUser_appointments_dr_national_idTouserInput>
  }

  export type appointmentsUpdateManyWithWhereWithoutUser_appointments_dr_national_idTouserInput = {
    where: appointmentsScalarWhereInput
    data: XOR<appointmentsUpdateManyMutationInput, appointmentsUncheckedUpdateManyWithoutAppointments_appointments_dr_national_idTouserInput>
  }

  export type appointmentsScalarWhereInput = {
    AND?: Enumerable<appointmentsScalarWhereInput>
    OR?: Enumerable<appointmentsScalarWhereInput>
    NOT?: Enumerable<appointmentsScalarWhereInput>
    id?: IntFilter | number
    appointment_date?: DateTimeFilter | Date | string
    appointment_from?: DateTimeFilter | Date | string
    appointment_to?: DateTimeFilter | Date | string
    dr_national_id?: IntFilter | number
    patient_national_id?: IntFilter | number
  }

  export type appointmentsUpsertWithWhereUniqueWithoutUser_appointments_patient_national_idTouserInput = {
    where: appointmentsWhereUniqueInput
    update: XOR<appointmentsUpdateWithoutUser_appointments_patient_national_idTouserInput, appointmentsUncheckedUpdateWithoutUser_appointments_patient_national_idTouserInput>
    create: XOR<appointmentsCreateWithoutUser_appointments_patient_national_idTouserInput, appointmentsUncheckedCreateWithoutUser_appointments_patient_national_idTouserInput>
  }

  export type appointmentsUpdateWithWhereUniqueWithoutUser_appointments_patient_national_idTouserInput = {
    where: appointmentsWhereUniqueInput
    data: XOR<appointmentsUpdateWithoutUser_appointments_patient_national_idTouserInput, appointmentsUncheckedUpdateWithoutUser_appointments_patient_national_idTouserInput>
  }

  export type appointmentsUpdateManyWithWhereWithoutUser_appointments_patient_national_idTouserInput = {
    where: appointmentsScalarWhereInput
    data: XOR<appointmentsUpdateManyMutationInput, appointmentsUncheckedUpdateManyWithoutAppointments_appointments_patient_national_idTouserInput>
  }

  export type recordCreateManyAppointmentsInput = {
    id?: number
    date: Date | string
    description?: string | null
    record_type_id: number
  }

  export type recordUpdateWithoutAppointmentsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    record_type?: record_typeUpdateOneRequiredWithoutRecordInput
    record_file?: record_fileUpdateManyWithoutRecordInput
  }

  export type recordUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    record_type_id?: IntFieldUpdateOperationsInput | number
    record_file?: record_fileUncheckedUpdateManyWithoutRecordInput
  }

  export type recordUncheckedUpdateManyWithoutRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    record_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type record_fileCreateManyRecordInput = {
    id?: number
    path: string
  }

  export type record_fileUpdateWithoutRecordInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type record_fileUncheckedUpdateWithoutRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type record_fileUncheckedUpdateManyWithoutRecord_fileInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type recordCreateManyRecord_typeInput = {
    id?: number
    date: Date | string
    description?: string | null
    appointments_id: number
  }

  export type recordUpdateWithoutRecord_typeInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    appointments?: appointmentsUpdateOneRequiredWithoutRecordInput
    record_file?: record_fileUpdateManyWithoutRecordInput
  }

  export type recordUncheckedUpdateWithoutRecord_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    appointments_id?: IntFieldUpdateOperationsInput | number
    record_file?: record_fileUncheckedUpdateManyWithoutRecordInput
  }

  export type userCreateManyRoleInput = {
    id: number
    name: string
    mname: string
    lname: string
    phone: string
    email?: string | null
    address?: string | null
    birthdate?: Date | string | null
    password: string
    passwordChangedAt?: Date | string | null
    passwordResetToken?: string | null
    passwordResetTokenExpiry?: Date | string | null
  }

  export type userUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments_appointments_dr_national_idTouser?: appointmentsUpdateManyWithoutUser_appointments_dr_national_idTouserInput
    appointments_appointments_patient_national_idTouser?: appointmentsUpdateManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments_appointments_dr_national_idTouser?: appointmentsUncheckedUpdateManyWithoutUser_appointments_dr_national_idTouserInput
    appointments_appointments_patient_national_idTouser?: appointmentsUncheckedUpdateManyWithoutUser_appointments_patient_national_idTouserInput
  }

  export type userUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type appointmentsCreateManyUser_appointments_dr_national_idTouserInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    patient_national_id: number
  }

  export type appointmentsCreateManyUser_appointments_patient_national_idTouserInput = {
    id?: number
    appointment_date: Date | string
    appointment_from: Date | string
    appointment_to: Date | string
    dr_national_id: number
  }

  export type appointmentsUpdateWithoutUser_appointments_dr_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    user_appointments_patient_national_idTouser?: userUpdateOneRequiredWithoutAppointments_appointments_patient_national_idTouserInput
    record?: recordUpdateManyWithoutAppointmentsInput
  }

  export type appointmentsUncheckedUpdateWithoutUser_appointments_dr_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    patient_national_id?: IntFieldUpdateOperationsInput | number
    record?: recordUncheckedUpdateManyWithoutAppointmentsInput
  }

  export type appointmentsUncheckedUpdateManyWithoutAppointments_appointments_dr_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    patient_national_id?: IntFieldUpdateOperationsInput | number
  }

  export type appointmentsUpdateWithoutUser_appointments_patient_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    user_appointments_dr_national_idTouser?: userUpdateOneRequiredWithoutAppointments_appointments_dr_national_idTouserInput
    record?: recordUpdateManyWithoutAppointmentsInput
  }

  export type appointmentsUncheckedUpdateWithoutUser_appointments_patient_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    dr_national_id?: IntFieldUpdateOperationsInput | number
    record?: recordUncheckedUpdateManyWithoutAppointmentsInput
  }

  export type appointmentsUncheckedUpdateManyWithoutAppointments_appointments_patient_national_idTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_from?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment_to?: DateTimeFieldUpdateOperationsInput | Date | string
    dr_national_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}